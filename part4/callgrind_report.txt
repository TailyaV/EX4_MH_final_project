--------------------------------------------------------------------------------
Profile data file 'callgrind.out.7078' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 394057
Trigger: Program termination
Profiled target:  ./callGraph -e 5 -v 4 -s 42 (PID 7078, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 
--------------------------------------------------------------------------------
2,447,814 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                file:function
--------------------------------------------------------------------------------
998,802 (40.80%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
579,719 (23.68%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
263,609 (10.77%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
121,052 ( 4.95%)  ./elf/./elf/dl-lookup.c:check_match [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
109,722 ( 4.48%)  ./elf/./elf/do-rel.h:_dl_relocate_object
 78,697 ( 3.21%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
 44,326 ( 1.81%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
 20,112 ( 0.82%)  ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x
 12,128 ( 0.50%)  ???:std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
 12,012 ( 0.49%)  ./elf/./elf/dl-version.c:_dl_check_map_versions [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
 11,115 ( 0.45%)  ./elf/../sysdeps/generic/ldsodefs.h:do_lookup_x
 10,305 ( 0.42%)  ./elf/../sysdeps/generic/ldsodefs.h:_dl_relocate_object
 10,240 ( 0.42%)  ./wcsmbs/./wcsmbs/btowc.c:btowc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  8,184 ( 0.33%)  ./elf/./elf/dl-runtime.c:_dl_fixup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  6,830 ( 0.28%)  ./stdlib/./stdlib/random_r.c:srandom_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
  4,432 ( 0.18%)  ./elf/./elf/dl-tunables.h:__GI___tunables_init
  4,192 ( 0.17%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:intel_check_word.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  4,166 ( 0.17%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  4,086 ( 0.17%)  ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0
  3,782 ( 0.15%)  ./elf/./elf/dl-load.c:_dl_map_object_from_fd [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  3,456 ( 0.14%)  ./elf/./elf/dl-cache.c:_dl_cache_libcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  3,456 ( 0.14%)  ./wcsmbs/./wcsmbs/wctob.c:wctob [/usr/lib/x86_64-linux-gnu/libc.so.6]
  2,848 ( 0.12%)  ./elf/./elf/dl-misc.c:_dl_name_match_p [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  2,733 ( 0.11%)  ???:std::ctype<wchar_t>::_M_initialize_ctype() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  2,523 ( 0.10%)  ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_fxsave [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  2,243 ( 0.09%)  ./elf/./elf/dl-load.c:_dl_map_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  2,226 ( 0.09%)  ./elf/./elf/dl-deps.c:_dl_map_object_deps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,823 ( 0.07%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,586 ( 0.06%)  ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S:__memcmp_sse4_1 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,585 ( 0.06%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,565 ( 0.06%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,554 ( 0.06%)  /usr/include/c++/11/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
  1,548 ( 0.06%)  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:__strlen_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,492 ( 0.06%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd
  1,481 ( 0.06%)  ./elf/./elf/dl-load.c:open_verify.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,408 ( 0.06%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,311 ( 0.05%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  1,308 ( 0.05%)  ./elf/./elf/rtld.c:dl_main [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,187 ( 0.05%)  ./elf/./elf/dl-load.c:open_path [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,185 ( 0.05%)  ./elf/./elf/dl-cache.c:_dl_load_cache_lookup [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,129 ( 0.05%)  ./elf/./elf/dl-object.c:_dl_new_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,115 ( 0.05%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,092 ( 0.04%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
  1,036 ( 0.04%)  ./wctype/./wctype/wctype_l.c:wctype_l [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,032 ( 0.04%)  ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    997 ( 0.04%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    987 ( 0.04%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    960 ( 0.04%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    948 ( 0.04%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    927 ( 0.04%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    896 ( 0.04%)  ./wcsmbs/./wcsmbsload.h:btowc
    896 ( 0.04%)  /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    883 ( 0.04%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_start
    840 ( 0.03%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    840 ( 0.03%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    816 ( 0.03%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:memset [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    816 ( 0.03%)  ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    815 ( 0.03%)  ./elf/./elf/do-rel.h:_dl_start
    813 ( 0.03%)  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:strlen [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    812 ( 0.03%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    785 ( 0.03%)  graph.cpp:Graph::addEdge(int, int) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    776 ( 0.03%)  ./malloc/./malloc/malloc.c:ptmalloc_init.part.0
    774 ( 0.03%)  ./elf/../sysdeps/nptl/dl-tls_init_tp.c:rtld_mutex_dummy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    768 ( 0.03%)  ./elf/./elf/dl-profstub.c:_dl_mcount_wrapper_check [/usr/lib/x86_64-linux-gnu/libc.so.6]
    768 ( 0.03%)  ./iconv/./iconv/gconv_simple.c:__gconv_btwoc_ascii [/usr/lib/x86_64-linux-gnu/libc.so.6]
    765 ( 0.03%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>, std::random_access_iterator_tag) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    754 ( 0.03%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    750 ( 0.03%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    745 ( 0.03%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd
    744 ( 0.03%)  ./string/../sysdeps/x86_64/multiarch/../strchr.S:index [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    741 ( 0.03%)  graph.cpp:Graph::hasEulerCircuit() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    740 ( 0.03%)  ./elf/./elf/dl-tunables.c:__tunable_get_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    732 ( 0.03%)  ???:std::ctype<char>::_M_widen_init() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    722 ( 0.03%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    708 ( 0.03%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:handle_intel.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    705 ( 0.03%)  ./stdlib/./stdlib/cxa_finalize.c:__cxa_finalize [/usr/lib/x86_64-linux-gnu/libc.so.6]
    694 ( 0.03%)  ./elf/./elf/dl-hwcaps.c:_dl_important_hwcaps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    666 ( 0.03%)  ???:std::locale::_Impl::_Impl(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    644 ( 0.03%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    631 ( 0.03%)  ./stdlib/../stdlib/strtol_l.c:____strtol_l_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
    623 ( 0.03%)  /usr/include/c++/11/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    611 ( 0.02%)  ./elf/../elf/dl-sysdep.c:_dl_sysdep_start [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    600 ( 0.02%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    592 ( 0.02%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:mempcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    589 ( 0.02%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    588 ( 0.02%)  /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    581 ( 0.02%)  ./elf/./elf/dl-environ.c:_dl_next_ld_env_entry [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    575 ( 0.02%)  ./stdlib/./stdlib/getenv.c:getenv [/usr/lib/x86_64-linux-gnu/libc.so.6]
    575 ( 0.02%)  main.cpp:buildRandGraph(int, int, int) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    570 ( 0.02%)  /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    546 ( 0.02%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    546 ( 0.02%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    530 ( 0.02%)  ./elf/./elf/dl-sort-maps.c:dfs_traversal.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    517 ( 0.02%)  ???:0x00000000048f4a60 [???]
    502 ( 0.02%)  ./elf/../sysdeps/x86/dl-prop.h:_dl_map_object_from_fd
    493 ( 0.02%)  ./libio/./libio/libioP.h:fwrite
    484 ( 0.02%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    472 ( 0.02%)  ./posix/./posix/getopt.c:_getopt_internal_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
    468 ( 0.02%)  ./stdlib/./stdlib/cxa_atexit.c:__cxa_atexit [/usr/lib/x86_64-linux-gnu/libc.so.6]
    468 ( 0.02%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator*() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    468 ( 0.02%)  /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    464 ( 0.02%)  ???:std::ios_base::ios_base() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    453 ( 0.02%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
    448 ( 0.02%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_do_relocate(int*, int*, int*, std::allocator<int>&, std::integral_constant<bool, true>) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    448 ( 0.02%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    446 ( 0.02%)  graph.cpp:Graph::printGraph() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    444 ( 0.02%)  /usr/include/c++/11/bits/vector.tcc:void std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_realloc_insert<std::pair<int, int> >(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::pair<int, int>&&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    436 ( 0.02%)  ./elf/./dl-find_object.h:_dl_find_object_from_map [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    432 ( 0.02%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    432 ( 0.02%)  /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    428 ( 0.02%)  ./stdlib/./stdlib/cxa_atexit.c:__new_exitfn [/usr/lib/x86_64-linux-gnu/libc.so.6]
    421 ( 0.02%)  ./elf/./elf/dl-init.c:call_init.part.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    420 ( 0.02%)  ./elf/./elf/dl-error-skeleton.c:_dl_catch_exception [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    420 ( 0.02%)  ./libio/./libio/iofflush.c:fflush [/usr/lib/x86_64-linux-gnu/libc.so.6]
    414 ( 0.02%)  ./elf/./elf/dl-fini.c:_dl_fini [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    414 ( 0.02%)  ???:std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    414 ( 0.02%)  ???:std::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    400 ( 0.02%)  graph.cpp:Graph::dfs(int, std::vector<bool, std::allocator<bool> >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) const'2 [/home/taliya/Documents/EX4_MH/part4/callGraph]
    392 ( 0.02%)  ./elf/./elf/dl-hwcaps_split.c:_dl_hwcaps_split_masked [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    391 ( 0.02%)  /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    384 ( 0.02%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    384 ( 0.02%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    378 ( 0.02%)  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c:__open_nocancel [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    374 ( 0.02%)  ???:std::locale::locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    364 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    360 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    350 ( 0.01%)  ./elf/../elf/dl-tls.c:_dl_allocate_tls_storage [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    350 ( 0.01%)  ???:std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    350 ( 0.01%)  ???:std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    348 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    345 ( 0.01%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    344 ( 0.01%)  ./elf/./elf/dl-sort-maps.c:_dl_sort_maps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    342 ( 0.01%)  ./elf/./get-dynamic-info.h:dl_main
    336 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    336 ( 0.01%)  ???:0x000000000012e8f0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    324 ( 0.01%)  /usr/include/c++/11/ext/string_conversions.h:int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    323 ( 0.01%)  /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_equals_val<int const> __gnu_cxx::__ops::__iter_equals_val<int const>(int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    322 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::_M_max_size() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    320 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    315 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    312 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_init_paths [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    310 ( 0.01%)  ./setjmp/../sysdeps/x86_64/setjmp.S:__sigsetjmp [/usr/lib/x86_64-linux-gnu/libc.so.6]
    308 ( 0.01%)  /usr/include/c++/11/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    306 ( 0.01%)  /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::find<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    306 ( 0.01%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    304 ( 0.01%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    304 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    300 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    300 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::max_size() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    298 ( 0.01%)  ???:std::ios_base::Init::Init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    294 ( 0.01%)  /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    294 ( 0.01%)  ???:0x00000000000dc6c0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    294 ( 0.01%)  ???:0x000000000012b240 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    286 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::pair<int, int> >::construct<std::pair<int, int>, std::pair<int, int> >(std::pair<int, int>*, std::pair<int, int>&&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    285 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    285 ( 0.01%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    278 ( 0.01%)  ./elf/./elf/dl-find_object.c:_dlfo_process_initial [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    278 ( 0.01%)  /usr/include/c++/11/bits/stl_uninitialized.h:std::pair<int, int>* std::__relocate_a_1<std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> > >(std::pair<int, int>*, std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    278 ( 0.01%)  ???:__cpu_indicator_init [/usr/lib/x86_64-linux-gnu/libgcc_s.so.1]
    276 ( 0.01%)  ???:std::ostream::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    275 ( 0.01%)  ./libio/./libio/fileops.c:_IO_do_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    273 ( 0.01%)  ./libio/./libio/fileops.c:_IO_file_overflow@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    270 ( 0.01%)  ./libio/./libio/fileops.c:_IO_file_sync@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    270 ( 0.01%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    270 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    268 ( 0.01%)  ./elf/./elf/dl-lookup-direct.c:_dl_lookup_direct [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    266 ( 0.01%)  /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    265 ( 0.01%)  ./elf/./elf/dl-object.c:_dl_add_to_namespace_list [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    264 ( 0.01%)  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    261 ( 0.01%)  ???:0x00000000048f2f30 [???]
    259 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    258 ( 0.01%)  /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    258 ( 0.01%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    256 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    256 ( 0.01%)  /usr/include/c++/11/bits/stl_uninitialized.h:std::pair<int, int>* std::__relocate_a<std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> > >(std::pair<int, int>*, std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    256 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    256 ( 0.01%)  /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    254 ( 0.01%)  ./stdlib/./stdlib/exit.c:__run_exit_handlers [/usr/lib/x86_64-linux-gnu/libc.so.6]
    252 ( 0.01%)  ./libio/./libio/libioP.h:fflush
    252 ( 0.01%)  /usr/include/c++/11/bits/move.h:std::pair<int, int>&& std::forward<std::pair<int, int> >(std::remove_reference<std::pair<int, int> >::type&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    252 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    251 ( 0.01%)  ./elf/./elf/dl-load.c:open_verify.constprop.1 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    248 ( 0.01%)  ./elf/./elf/dl-find_object.c:_dlfo_sort_mappings [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    248 ( 0.01%)  ./elf/./elf/dl-minimal.c:strsep [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    247 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, int> > >::construct<std::pair<int, int>, std::pair<int, int> >(std::allocator<std::pair<int, int> >&, std::pair<int, int>*, std::pair<int, int>&&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    245 ( 0.01%)  ./elf/./elf/dl-tunables.c:__GI___tunable_set_val [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    244 ( 0.01%)  ./elf/../sysdeps/x86/dl-prop.h:dl_main
    243 ( 0.01%)  ./elf/./get-dynamic-info.h:_dl_start
    240 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    240 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int>* const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    240 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    240 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    236 ( 0.01%)  main.cpp:main [/home/taliya/Documents/EX4_MH/part4/callGraph]
    234 ( 0.01%)  ./misc/../sysdeps/unix/sysv/linux/mmap64.c:mmap [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    233 ( 0.01%)  ./string/../sysdeps/x86_64/strcspn.S:strcspn [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    232 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_check_len(unsigned long, char const*) const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    224 ( 0.01%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
    224 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    215 ( 0.01%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:get_common_cache_info.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    208 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::size() const [/home/taliya/Documents/EX4_MH/part4/callGraph]
    208 ( 0.01%)  ???:std::ios_base::_M_init() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    207 ( 0.01%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:init_cpu_features.constprop.0
    205 ( 0.01%)  ???:0x00000000048f26b0 [???]
    203 ( 0.01%)  ./elf/./elf/dl-setup_hash.c:_dl_setup_hash [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    200 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    200 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_S_max_size(std::allocator<std::pair<int, int> > const&) [/home/taliya/Documents/EX4_MH/part4/callGraph]
    200 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::end() [/home/taliya/Documents/EX4_MH/part4/callGraph]
    198 ( 0.01%)  ./elf/./elf/dl-deps.c:openaux [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    198 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_dst_count [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]

--------------------------------------------------------------------------------
-- Auto-annotated source: main.cpp
--------------------------------------------------------------------------------
Ir           

-- line 12 ----------------------------------------
  .           // Helper to print a circuit
  .           void printCircuit(const vector<int>& circuit) {
  .               for (int v : circuit) {
  .                   cout << v << " ";
  .               }
  .               cout << endl;
  .           }
  .           
 13 ( 0.00%)  Graph buildRandGraph(int numOfEdges, int numOfVartx, int seed){
  .               // Compute the maximum number of edges in a simple undirected graph with V vertices
  8 ( 0.00%)      int allEdgesNum = numOfVartx*(numOfVartx - 1)/2;
  .               // Validate that requested number of edges does not exceed the maximum possible
  3 ( 0.00%)      if(numOfEdges > allEdgesNum){
  .                   throw invalid_argument("Graph with" + to_string(numOfVartx) + " vatexes cant have " + to_string(numOfEdges) + "edgaes.\n");
  .               }
  3 ( 0.00%)      srand(seed);
6,848 ( 0.28%)  => ???:0x000000000010a530 (1x)
  .               // Create an undirected graph
  6 ( 0.00%)      Graph graph(numOfVartx, false);
1,115 ( 0.05%)  => /home/taliya/Documents/EX4_MH/part4/graph.cpp:Graph::Graph(int, bool) (1x)
  .           
  3 ( 0.00%)      vector<pair<int, int>> allAdges;
 67 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector() (1x)
  3 ( 0.00%)      vector<int> chosen;
 67 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (1x)
  .               // Build the list of all possible undirected edges
 29 ( 0.00%)      for (int u = 0; u < numOfVartx; u++) {
 64 ( 0.00%)          for (int v = u + 1; v < numOfVartx; v++) {
 66 ( 0.00%)              allAdges.push_back({u, v});
8,387 ( 0.34%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::push_back(std::pair<int, int>&&) (6x)
216 ( 0.01%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<int, int>::pair<int&, int&, true>(int&, int&) (6x)
  .                   }
  .               }
  .               // Randomly choose 'numOfEdges' distinct edges
 25 ( 0.00%)      for(int i = 0; i < numOfEdges; i++){
 25 ( 0.00%)          int randNum = rand() % allEdgesNum;
300 ( 0.01%)  => ???:0x000000000010a400 (5x)
  .                   // If this index was already used, keep drawing until a new one is found
180 ( 0.01%)          while(find(chosen.begin(), chosen.end(), randNum) != chosen.end()){
1,849 ( 0.08%)  => /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::find<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (7x)
448 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (14x)
238 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (7x)
217 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (7x)
 10 ( 0.00%)              randNum = rand() % allEdgesNum;
120 ( 0.00%)  => ???:0x000000000010a400 (2x)
  .                   }
  .                       // Add the corresponding edge to the graph
 95 ( 0.00%)              graph.addEdge(allAdges[randNum].first, allAdges[randNum].second);
15,657 ( 0.64%)  => /home/taliya/Documents/EX4_MH/part4/graph.cpp:Graph::addEdge(int, int) (5x)
120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::operator[](unsigned long) (10x)
  .                       // Mark the index as used
 25 ( 0.00%)              chosen.push_back(randNum);
4,701 ( 0.19%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (5x)
  .                   
  .               }
  2 ( 0.00%)      return graph;
 15 ( 0.00%)  }
268 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (1x)
268 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector() (1x)
  .           
  .           #ifndef UNIT_TESTING
 11 ( 0.00%)  int main(int argc, char* argv[]) {
  .               //Usage check: expects -e <edges> -v <vertices> -s <seed>
  2 ( 0.00%)      if(argc < 7){
  .                   cout << "Please enter 'program name' -e <numberOfEdges> -v <numberOfVertax> -s <seed>" << endl;
  .                   return 1;
  .               }
  1 ( 0.00%)      int numOfEdges = 0;
  1 ( 0.00%)      int numOfVartx = 0;
  .               int seed;
  .               int ret;
  .           
  .               //Get the arguments from the user and cheack correctness
 45 ( 0.00%)      while((ret = getopt(argc, argv, ":e:v:s:")) != -1){
1,292 ( 0.05%)  => ???:0x000000000010a3e0 (4x)
 18 ( 0.00%)          switch(ret){
  .                       //Unknown option
  .                       case '?':
  .                           std::cout << static_cast<char>(optopt) << " is unknown option" << std::endl;
  .                       //No value provided to option
  .                       case ':':
  .                           std::cout << "No value provided to option " << static_cast<char>(optopt) << std::endl;
  .                       case 'e':
 21 ( 0.00%)                  try{numOfEdges = stoi(optarg);
197 ( 0.01%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
261 ( 0.01%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
  8 ( 0.00%)  => ???:0x000000000010a4a0 (1x)
  4 ( 0.00%)  => ???:0x000000000010a6b0 (1x)
  4 ( 0.00%)  => ???:0x000000000010a590 (1x)
  .                           }catch(const std::invalid_argument&){printf("invalid argument, write number(int) of edges\n"); return 1; }
  .                       case 'v':
 42 ( 0.00%)                  try{numOfVartx = stoi(optarg);
394 ( 0.02%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (2x)
522 ( 0.02%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (2x)
 16 ( 0.00%)  => ???:0x000000000010a4a0 (2x)
  8 ( 0.00%)  => ???:0x000000000010a590 (2x)
  8 ( 0.00%)  => ???:0x000000000010a6b0 (2x)
  .                           }catch(const std::invalid_argument&){printf("invalid argument, write number(int) of vartexes\n"); return 1; }
  .                       case 's':
 63 ( 0.00%)                   try{seed = stoi(optarg);
1,612 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (3x)
802 ( 0.03%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (3x)
 24 ( 0.00%)  => ???:0x000000000010a4a0 (3x)
 12 ( 0.00%)  => ???:0x000000000010a590 (3x)
 12 ( 0.00%)  => ???:0x000000000010a6b0 (3x)
  .                           }catch(const std::invalid_argument&){printf("invalid argument, write number(int) for seed\n"); return 1; }
  .                   }
  .               }
  9 ( 0.00%)      Graph graph = buildRandGraph(numOfEdges, numOfVartx, seed); 
41,461 ( 1.69%)  => main.cpp:buildRandGraph(int, int, int) (1x)
1,473 ( 0.06%)  => /home/taliya/Documents/EX4_MH/part4/graph.hpp:Graph::~Graph() (1x)
  .               // Print the graph
  3 ( 0.00%)      graph.printGraph();
23,820 ( 0.97%)  => /home/taliya/Documents/EX4_MH/part4/graph.cpp:Graph::printGraph() const (1x)
  .               // Check if the graph has an Euler circuit; if so, compute and print it
  5 ( 0.00%)      if (graph.hasEulerCircuit()) {
11,357 ( 0.46%)  => /home/taliya/Documents/EX4_MH/part4/graph.cpp:Graph::hasEulerCircuit() const (1x)
  .                   cout << "Euler Circuit exists. Path:\n";
  .                   printCircuit(graph.findEulerCircuit());
  .               } else {
  5 ( 0.00%)          cout << "No Euler Circuit.\n";
448 ( 0.02%)  => ???:0x000000000010a540 (1x)
  .               }
  .               
  1 ( 0.00%)      return 0;
 30 ( 0.00%)  }
102,893 ( 4.20%)  => main.cpp:__static_initialization_and_destruction_0(int, int) (1x)
  .           #endif
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir           

-- line 222 ----------------------------------------
  .              *
  .              *  This is the simple classic generic implementation.  It will work on
  .              *  temporary expressions, since they are only evaluated once, unlike a
  .              *  preprocessor macro.
  .             */
  .             template<typename _Tp>
  .               _GLIBCXX14_CONSTEXPR
  .               inline const _Tp&
195 ( 0.01%)      min(const _Tp& __a, const _Tp& __b)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .                 //return __b < __a ? __b : __a;
234 ( 0.01%)        if (__b < __a)
  .           	return __b;
 39 ( 0.00%)        return __a;
 78 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief This does what you think it does.
  .              *  @ingroup sorting_algorithms
  .              *  @param  __a  A thing of arbitrary type.
  .              *  @param  __b  Another thing of arbitrary type.
  .              *  @return   The greater of the parameters.
  .              *
  .              *  This is the simple classic generic implementation.  It will work on
  .              *  temporary expressions, since they are only evaluated once, unlike a
  .              *  preprocessor macro.
  .             */
  .             template<typename _Tp>
  .               _GLIBCXX14_CONSTEXPR
  .               inline const _Tp&
 90 ( 0.00%)      max(const _Tp& __a, const _Tp& __b)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .                 //return  __a < __b ? __b : __a;
108 ( 0.00%)        if (__a < __b)
 12 ( 0.00%)  	return __b;
 12 ( 0.00%)        return __a;
 36 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief This does what you think it does.
  .              *  @ingroup sorting_algorithms
  .              *  @param  __a  A thing of arbitrary type.
  .              *  @param  __b  Another thing of arbitrary type.
  .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
  .              *  @return   The lesser of the parameters.
-- line 270 ----------------------------------------
-- line 305 ----------------------------------------
  .                 return __a;
  .               }
  .           
  .             // Fallback implementation of the function in bits/stl_iterator.h used to
  .             // remove the __normal_iterator wrapper. See copy, fill, ...
  .             template<typename _Iterator>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _Iterator
432 ( 0.02%)      __niter_base(_Iterator __it)
  .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
324 ( 0.01%)      { return __it; }
  .           
  .             template<typename _Ite, typename _Seq>
  .               _Ite
  .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
  .           		 std::random_access_iterator_tag>&);
  .           
  .             // Reverse the __niter_base transformation to get a
  .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 323 ----------------------------------------
-- line 911 ----------------------------------------
  .                 for (; __first != __last; ++__first)
  .           	*__first = __value;
  .               }
  .           
  .             template<typename _ForwardIterator, typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline typename
  .               __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 12 ( 0.00%)      __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
  .           	      const _Tp& __value)
  .               {
  6 ( 0.00%)        const _Tp __tmp = __value;
 40 ( 0.00%)        for (; __first != __last; ++__first)
 24 ( 0.00%)  	*__first = __tmp;
  8 ( 0.00%)      }
  .           
  .             // Specialization: for char types we can use memset.
  .             template<typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline typename
  .               __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
  .               __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
  .               {
-- line 933 ----------------------------------------
-- line 960 ----------------------------------------
  .           
  .             void
  .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,
  .           	    const bool&);
  .           
  .             template<typename _FIte, typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline void
 14 ( 0.00%)      __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 18 ( 0.00%)      { std::__fill_a1(__first, __last, __value); }
 90 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) (2x)
  .           
  .             template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
  .               void
  .               __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  .           	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  .           	     const _Tp&);
  .           
  .             /**
-- line 977 ----------------------------------------
-- line 1002 ----------------------------------------
  .             // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  .             inline _GLIBCXX_CONSTEXPR int
  .             __size_to_integer(int __n) { return __n; }
  .             inline _GLIBCXX_CONSTEXPR unsigned
  .             __size_to_integer(unsigned __n) { return __n; }
  .             inline _GLIBCXX_CONSTEXPR long
  .             __size_to_integer(long __n) { return __n; }
  .             inline _GLIBCXX_CONSTEXPR unsigned long
 14 ( 0.00%)    __size_to_integer(unsigned long __n) { return __n; }
  .             inline _GLIBCXX_CONSTEXPR long long
  .             __size_to_integer(long long __n) { return __n; }
  .             inline _GLIBCXX_CONSTEXPR unsigned long long
  .             __size_to_integer(unsigned long long __n) { return __n; }
  .           
  .           #if defined(__GLIBCXX_TYPE_INT_N_0)
  .             inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
  .             __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
-- line 1018 ----------------------------------------
-- line 1101 ----------------------------------------
  .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
  .           #endif
  .                 return __fill_n_a1(__first, __n, __value);
  .               }
  .           
  .             template<typename _OutputIterator, typename _Size, typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _OutputIterator
 14 ( 0.00%)      __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
  .           	       std::random_access_iterator_tag)
  .               {
  .           #if __cplusplus >= 201103L
  .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
  .           #endif
  4 ( 0.00%)        if (__n <= 0)
  .           	return __first;
  .           
  .                 __glibcxx_requires_can_increment(__first, __n);
  .           
 18 ( 0.00%)        std::__fill_a(__first, __first + __n, __value);
122 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::__fill_a<int*, int>(int*, int*, int const&) (2x)
  8 ( 0.00%)        return __first + __n;
  4 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief Fills the range [first,first+n) with copies of value.
  .              *  @ingroup mutating_algorithms
  .              *  @param  __first  An output iterator.
  .              *  @param  __n      The count of copies to perform.
  .              *  @param  __value  A reference-to-const of arbitrary type.
  .              *  @return   The iterator at first+n.
-- line 1130 ----------------------------------------
-- line 1136 ----------------------------------------
  .              *  If @p __n is negative, the function does nothing.
  .             */
  .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .             // DR 865. More algorithms that throw away information
  .             // DR 426. search_n(), fill_n(), and generate_n() with negative n
  .             template<typename _OI, typename _Size, typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _OI
 14 ( 0.00%)      fill_n(_OI __first, _Size __n, const _Tp& __value)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
  .           
 18 ( 0.00%)        return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
170 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&, std::random_access_iterator_tag) (2x)
 14 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:std::__size_to_integer(unsigned long) (2x)
  6 ( 0.00%)  			       std::__iterator_category(__first));
 12 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<int*>::iterator_category std::__iterator_category<int*>(int* const&) (2x)
  4 ( 0.00%)      }
  .           
  .             template<bool _BoolType>
  .               struct __equal
  .               {
  .                 template<typename _II1, typename _II2>
  .           	_GLIBCXX20_CONSTEXPR
  .           	static bool
  .           	equal(_II1 __first1, _II1 __last1, _II2 __first2)
-- line 1159 ----------------------------------------
-- line 2053 ----------------------------------------
  .           	++__first;
  .                 return __first;
  .               }
  .           
  .             /// This is an overload used by find algos for the RAI case.
  .             template<typename _RandomAccessIterator, typename _Predicate>
  .               _GLIBCXX20_CONSTEXPR
  .               _RandomAccessIterator
119 ( 0.00%)      __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
  .           	      _Predicate __pred, random_access_iterator_tag)
  .               {
  .                 typename iterator_traits<_RandomAccessIterator>::difference_type
119 ( 0.00%)  	__trip_count = (__last - __first) >> 2;
595 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (17x)
  .           
 54 ( 0.00%)        for (; __trip_count > 0; --__trip_count)
  .           	{
 14 ( 0.00%)  	  if (__pred(__first))
 50 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2x)
  .           	    return __first;
  6 ( 0.00%)  	  ++__first;
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (2x)
  .           
 14 ( 0.00%)  	  if (__pred(__first))
 50 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2x)
  .           	    return __first;
  6 ( 0.00%)  	  ++__first;
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (2x)
  .           
 14 ( 0.00%)  	  if (__pred(__first))
 50 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2x)
  .           	    return __first;
  6 ( 0.00%)  	  ++__first;
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (2x)
  .           
 14 ( 0.00%)  	  if (__pred(__first))
 50 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2x)
  2 ( 0.00%)  	    return __first;
  3 ( 0.00%)  	  ++__first;
 12 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (1x)
  .           	}
  .           
196 ( 0.01%)        switch (__last - __first)
560 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (16x)
  .           	{
  .           	case 3:
  7 ( 0.00%)  	  if (__pred(__first))
 25 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (1x)
  .           	    return __first;
  3 ( 0.00%)  	  ++__first;
 12 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (1x)
  .           	  // FALLTHRU
  .           	case 2:
 28 ( 0.00%)  	  if (__pred(__first))
100 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (4x)
  .           	    return __first;
 12 ( 0.00%)  	  ++__first;
 48 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (4x)
  .           	  // FALLTHRU
  .           	case 1:
 70 ( 0.00%)  	  if (__pred(__first))
250 ( 0.01%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (10x)
  2 ( 0.00%)  	    return __first;
 27 ( 0.00%)  	  ++__first;
108 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (9x)
  .           	  // FALLTHRU
  .           	case 0:
  .           	default:
 15 ( 0.00%)  	  return __last;
  .           	}
 34 ( 0.00%)      }
  .           
  .             template<typename _Iterator, typename _Predicate>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _Iterator
119 ( 0.00%)      __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
  .               {
102 ( 0.00%)        return __find_if(__first, __last, __pred,
2,747 ( 0.11%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>, std::random_access_iterator_tag) (17x)
 51 ( 0.00%)  		       std::__iterator_category(__first));
102 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (17x)
 34 ( 0.00%)      }
  .           
  .             template<typename _InputIterator, typename _Predicate>
  .               _GLIBCXX20_CONSTEXPR
  .               typename iterator_traits<_InputIterator>::difference_type
  .               __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  .               {
  .                 typename iterator_traits<_InputIterator>::difference_type __n = 0;
  .                 for (; __first != __last; ++__first)
-- line 2124 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.h
--------------------------------------------------------------------------------
Ir           

-- line 525 ----------------------------------------
  .                  *  @param  __s  Source C string.
  .                  *  @param  __a  Allocator to use (default is default allocator).
  .                  */
  .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 3076. basic_string CTAD ambiguity
  .                 template<typename = _RequireAllocator<_Alloc>>
  .           #endif
 66 ( 0.00%)        basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 60 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
 30 ( 0.00%)  => ???:0x000000000010a500 (6x)
 30 ( 0.00%)  => ???:0x000000000010a580 (6x)
  .                 {
 54 ( 0.00%)  	const _CharT* __end = __s ? __s + traits_type::length(__s)
210 ( 0.01%)  => /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) (6x)
  .           	  // We just need a non-null pointer here to get an exception:
  .           	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 36 ( 0.00%)  	_M_construct(__s, __end, random_access_iterator_tag());
1,675 ( 0.07%)  => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (6x)
 42 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @brief  Construct string as multiple characters.
  .                  *  @param  __n  Number of characters.
  .                  *  @param  __c  Character to use.
  .                  *  @param  __a  Allocator to use (default is default allocator).
  .                  */
  .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
-- line 548 ----------------------------------------
-- line 6612 ----------------------------------------
  .           {
  .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
  .           _GLIBCXX_BEGIN_NAMESPACE_CXX11
  .           
  .           #if _GLIBCXX_USE_C99_STDLIB
  .             // 21.4 Numeric Conversions [string.conversions].
  .             inline int
  .             stoi(const string& __str, size_t* __idx = 0, int __base = 10)
120 ( 0.00%)    { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
1,423 ( 0.06%)  => /usr/include/c++/11/ext/string_conversions.h:int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) (6x)
 30 ( 0.00%)  => ???:0x000000000010a430 (6x)
 12 ( 0.00%)  					__idx, __base); }
  .           
  .             inline long
  .             stol(const string& __str, size_t* __idx = 0, int __base = 10)
  .             { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
  .           			     __idx, __base); }
  .           
  .             inline unsigned long
  .             stoul(const string& __str, size_t* __idx = 0, int __base = 10)
-- line 6629 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/string_conversions.h
--------------------------------------------------------------------------------
Ir          

-- line 46 ----------------------------------------
 .           namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 .           {
 .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
 .           
 .             // Helper for all the sto* functions.
 .             template<typename _TRet, typename _Ret = _TRet, typename _CharT,
 .           	   typename... _Base>
 .               _Ret
78 ( 0.00%)      __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 .           	   const char* __name, const _CharT* __str, std::size_t* __idx,
 .           	   _Base... __base)
 .               {
 .                 _Ret __ret;
 .           
 .                 _CharT* __endptr;
 .           
 .                 struct _Save_errno {
84 ( 0.00%)  	_Save_errno() : _M_errno(errno) { errno = 0; }
72 ( 0.00%)  => ???:0x000000000010a3c0 (12x)
96 ( 0.00%)  	~_Save_errno() { if (errno == 0) errno = _M_errno; }
72 ( 0.00%)  => ???:0x000000000010a3c0 (12x)
 .           	int _M_errno;
18 ( 0.00%)        } const __save_errno;
156 ( 0.01%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() (6x)
 .           
 .                 struct _Range_chk {
 .           	  static bool
 .           	  _S_chk(_TRet, std::false_type) { return false; }
 .           
 .           	  static bool
24 ( 0.00%)  	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 .           	  {
 .           	    return __val < _TRet(__numeric_traits<int>::__min)
42 ( 0.00%)  	      || __val > _TRet(__numeric_traits<int>::__max);
12 ( 0.00%)  	  }
 .                 };
 .           
48 ( 0.00%)        const _TRet __tmp = __convf(__str, &__endptr, __base...);
661 ( 0.03%)  => ./stdlib/../stdlib/strtol.c:strtol (6x)
 .           
18 ( 0.00%)        if (__endptr == __str)
 .           	std::__throw_invalid_argument(__name);
24 ( 0.00%)        else if (errno == ERANGE
36 ( 0.00%)  => ???:0x000000000010a3c0 (6x)
48 ( 0.00%)  	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
78 ( 0.00%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) (6x)
 .           	std::__throw_out_of_range(__name);
 .                 else
12 ( 0.00%)  	__ret = __tmp;
 .           
12 ( 0.00%)        if (__idx)
 .           	*__idx = __endptr - __str;
 .           
12 ( 0.00%)        return __ret;
54 ( 0.00%)      }
168 ( 0.01%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() (6x)
 .           
 .             // Helper for the to_string / to_wstring functions.
 .             template<typename _String, typename _CharT = typename _String::value_type>
 .               _String
 .               __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 .           				 __builtin_va_list), std::size_t __n,
 .           		 const _CharT* __fmt, ...)
 .               {
-- line 102 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir          

-- line 198 ----------------------------------------
 .           	  }
 .           
 .           	_M_set_length(__len);
 .                 }
 .           
 .             template<typename _CharT, typename _Traits, typename _Alloc>
 .               template<typename _InIterator>
 .                 void
66 ( 0.00%)        basic_string<_CharT, _Traits, _Alloc>::
 .                 _M_construct(_InIterator __beg, _InIterator __end,
 .           		   std::forward_iterator_tag)
 .                 {
 .           	// NB: Not required, but considered best practice.
48 ( 0.00%)  	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
48 ( 0.00%)  => /usr/include/c++/11/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char const>(char const*) (6x)
 .           	  std::__throw_logic_error(__N("basic_string::"
 .           				       "_M_construct null not valid"));
 .           
36 ( 0.00%)  	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
186 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) (6x)
 .           
18 ( 0.00%)  	if (__dnew > size_type(_S_local_capacity))
 .           	  {
 .           	    _M_data(_M_create(__dnew, size_type(0)));
 .           	    _M_capacity(__dnew);
 .           	  }
 .           
 .           	// Check for out_of_range and length_error exceptions.
 .           	__try
54 ( 0.00%)  	  { this->_S_copy_chars(_M_data(), __beg, __end); }
1,075 ( 0.04%)  => ???:0x000000000010a5b0 (6x)
30 ( 0.00%)  => ???:0x000000000010a5a0 (6x)
 .           	__catch(...)
 .           	  {
 .           	    _M_dispose();
 .           	    __throw_exception_again;
 .           	  }
 .           
30 ( 0.00%)  	_M_set_length(__dnew);
42 ( 0.00%)  => ???:0x000000000010a4b0 (6x)
42 ( 0.00%)        }
 .           
 .             template<typename _CharT, typename _Traits, typename _Alloc>
 .               void
 .               basic_string<_CharT, _Traits, _Alloc>::
 .               _M_construct(size_type __n, _CharT __c)
 .               {
 .                 if (__n > size_type(_S_local_capacity))
 .           	{
-- line 241 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir           

-- line 245 ----------------------------------------
  .           	}
  .               };
  .           
  .             template<>
  .               struct __uninitialized_fill_n<true>
  .               {
  .                 template<typename _ForwardIterator, typename _Size, typename _Tp>
  .                   static _ForwardIterator
 14 ( 0.00%)          __uninit_fill_n(_ForwardIterator __first, _Size __n,
  .           			const _Tp& __x)
 16 ( 0.00%)          { return std::fill_n(__first, __n, __x); }
238 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (2x)
  .               };
  .           
  .             /// @endcond
  .           
  .              // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .              // DR 1339. uninitialized_fill_n should return the end of its range
  .             /**
  .              *  @brief Copies the value x into the range [first,first+n).
-- line 263 ----------------------------------------
-- line 265 ----------------------------------------
  .              *  @param  __n      The number of copies to make.
  .              *  @param  __x      The source value.
  .              *  @return   Nothing.
  .              *
  .              *  Like fill_n(), but does not require an initialized output range.
  .             */
  .             template<typename _ForwardIterator, typename _Size, typename _Tp>
  .               inline _ForwardIterator
 14 ( 0.00%)      uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
  .               {
  .                 typedef typename iterator_traits<_ForwardIterator>::value_type
  .           	_ValueType;
  .           
  .                 // Trivial types do not need a constructor to begin their lifetime,
  .                 // so try to use std::fill_n to benefit from its memmove optimization.
  .                 // For arbitrary class types and floating point types we can't assume
  .                 // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
-- line 281 ----------------------------------------
-- line 285 ----------------------------------------
  .           #else
  .                 // Trivial types can have deleted copy constructor, but the std::fill_n
  .                 // optimization that uses memmove would happily "copy" them anyway.
  .                 static_assert(is_constructible<_ValueType, const _Tp&>::value,
  .           	  "result type must be constructible from input type");
  .           
  .                 // Trivial types can have deleted assignment, so using std::fill_n
  .                 // would be ill-formed. Require assignability before using std::fill_n:
  2 ( 0.00%)        constexpr bool __can_fill
  .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
  .           #endif
  .                 return __uninitialized_fill_n<__is_trivial(_ValueType) && __can_fill>::
 12 ( 0.00%)  	__uninit_fill_n(__first, __n, __x);
268 ( 0.01%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_fill_n<true>::__uninit_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (2x)
  4 ( 0.00%)      }
  .           
  .             /// @cond undocumented
  .           
  .             // Extensions: versions of uninitialized_copy, uninitialized_fill,
  .             //  and uninitialized_fill_n that take an allocator parameter.
  .             //  We dispatch back to the standard versions when we're given the
  .             //  default allocator.  For nondefault allocators we do not use 
  .             //  any of the POD optimizations.
-- line 306 ----------------------------------------
-- line 400 ----------------------------------------
  .           	  std::_Destroy(__first, __cur, __alloc);
  .           	  __throw_exception_again;
  .           	}
  .               }
  .           
  .             template<typename _ForwardIterator, typename _Size, typename _Tp,
  .           	   typename _Tp2>
  .               inline _ForwardIterator
 16 ( 0.00%)      __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
  .           			     const _Tp& __x, allocator<_Tp2>&)
 16 ( 0.00%)      { return std::uninitialized_fill_n(__first, __n, __x); }
300 ( 0.01%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::uninitialized_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&) (2x)
  .           
  .           
  .             // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
  .             // __uninitialized_fill_move, __uninitialized_move_fill.
  .             // All of these algorithms take a user-supplied allocator, which is used
  .             // for construction and destruction.
  .           
  .             // __uninitialized_copy_move
-- line 418 ----------------------------------------
-- line 565 ----------------------------------------
  .           	}
  .               };
  .           
  .             template<bool _TrivialValueType>
  .               struct __uninitialized_default_n_1
  .               {
  .                 template<typename _ForwardIterator, typename _Size>
  .                   static _ForwardIterator
  6 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
  .                   {
  2 ( 0.00%)  	  _ForwardIterator __cur = __first;
  .           	  __try
  .           	    {
 19 ( 0.00%)  	      for (; __n > 0; --__n, (void) ++__cur)
 20 ( 0.00%)  		std::_Construct(std::__addressof(*__cur));
368 ( 0.02%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Construct<std::vector<int, std::allocator<int> >>(std::vector<int, std::allocator<int> >*) (4x)
 28 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&) (4x)
  1 ( 0.00%)  	      return __cur;
  .           	    }
  .           	  __catch(...)
  .           	    {
  .           	      std::_Destroy(__first, __cur);
  .           	      __throw_exception_again;
  .           	    }
  2 ( 0.00%)  	}
  .               };
  .           
  .             template<>
  .               struct __uninitialized_default_n_1<true>
  .               {
  .                 template<typename _ForwardIterator, typename _Size>
  .                   static _ForwardIterator
  .                   __uninit_default_n(_ForwardIterator __first, _Size __n)
-- line 595 ----------------------------------------
-- line 622 ----------------------------------------
  .           				     && __assignable>::
  .           	__uninit_default(__first, __last);
  .               }
  .           
  .             // __uninitialized_default_n
  .             // Fills [first, first + n) with value-initialized value_types.
  .             template<typename _ForwardIterator, typename _Size>
  .               inline _ForwardIterator
  6 ( 0.00%)      __uninitialized_default_n(_ForwardIterator __first, _Size __n)
  .               {
  .                 typedef typename iterator_traits<_ForwardIterator>::value_type
  .           	_ValueType;
  .                 // See uninitialized_fill_n for the conditions for using std::fill_n.
  1 ( 0.00%)        constexpr bool __can_fill
  .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
  .           
  .                 return __uninitialized_default_n_1<__is_trivial(_ValueType)
  .           					 && __can_fill>::
  5 ( 0.00%)  	__uninit_default_n(__first, __n);
446 ( 0.02%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<int, std::allocator<int> >* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::vector<int, std::allocator<int> >*, unsigned long>(std::vector<int, std::allocator<int> >*, unsigned long) (1x)
  2 ( 0.00%)      }
  .           
  .           
  .             // __uninitialized_default_a
  .             // Fills [first, last) with value_types constructed by the allocator
  .             // alloc, with no arguments passed to the construct call.
  .             template<typename _ForwardIterator, typename _Allocator>
  .               void
  .               __uninitialized_default_a(_ForwardIterator __first,
-- line 649 ----------------------------------------
-- line 694 ----------------------------------------
  .           	  __throw_exception_again;
  .           	}
  .               }
  .           
  .             // __uninitialized_default_n_a specialization for std::allocator,
  .             // which ignores the allocator and value-initializes the elements.
  .             template<typename _ForwardIterator, typename _Size, typename _Tp>
  .               inline _ForwardIterator
  7 ( 0.00%)      __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
  .           				allocator<_Tp>&)
  7 ( 0.00%)      { return std::__uninitialized_default_n(__first, __n); }
460 ( 0.02%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<int, std::allocator<int> >* std::__uninitialized_default_n<std::vector<int, std::allocator<int> >*, unsigned long>(std::vector<int, std::allocator<int> >*, unsigned long) (1x)
  .           
  .             template<bool _TrivialValueType>
  .               struct __uninitialized_default_novalue_1
  .               {
  .                 template<typename _ForwardIterator>
  .           	static void
  .           	__uninit_default_novalue(_ForwardIterator __first,
  .           				 _ForwardIterator __last)
-- line 712 ----------------------------------------
-- line 978 ----------------------------------------
  .               }
  .           #endif // C++17
  .           
  .           #if __cplusplus >= 201103L
  .             /// @cond undocumented
  .           
  .             template<typename _Tp, typename _Up, typename _Allocator>
  .               inline void
 49 ( 0.00%)      __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
  .           			_Allocator& __alloc)
  .               noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
  .           			 __dest, std::move(*__orig)))
  .           	     && noexcept(std::allocator_traits<_Allocator>::destroy(
  .           			    __alloc, std::__addressof(*__orig))))
  .               {
  .                 typedef std::allocator_traits<_Allocator> __traits;
 63 ( 0.00%)        __traits::construct(__alloc, __dest, std::move(*__orig));
441 ( 0.02%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, int> > >::construct<std::pair<int, int>, std::pair<int, int> >(std::allocator<std::pair<int, int> >&, std::pair<int, int>*, std::pair<int, int>&&) (7x)
 49 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::pair<int, int>&>::type&& std::move<std::pair<int, int>&>(std::pair<int, int>&) (7x)
 56 ( 0.00%)        __traits::destroy(__alloc, std::__addressof(*__orig));
154 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, int> > >::destroy<std::pair<int, int> >(std::allocator<std::pair<int, int> >&, std::pair<int, int>*) (7x)
 49 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int, int>* std::__addressof<std::pair<int, int> >(std::pair<int, int>&) (7x)
 21 ( 0.00%)      }
  .           
  .             // This class may be specialized for specific types.
  .             // Also known as is_trivially_relocatable.
  .             template<typename _Tp, typename = void>
  .               struct __is_bitwise_relocatable
  .               : is_trivial<_Tp> { };
  .           
  .             template <typename _Tp, typename _Up>
  .               inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
224 ( 0.01%)      __relocate_a_1(_Tp* __first, _Tp* __last,
  .           		   _Tp* __result, allocator<_Up>&) noexcept
  .               {
112 ( 0.00%)        ptrdiff_t __count = __last - __first;
 56 ( 0.00%)        if (__count > 0)
 63 ( 0.00%)  	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
127 ( 0.01%)  => ???:0x000000000010a650 (9x)
112 ( 0.00%)        return __result + __count;
 56 ( 0.00%)      }
  .           
  .             template <typename _InputIterator, typename _ForwardIterator,
  .           	    typename _Allocator>
  .               inline _ForwardIterator
 72 ( 0.00%)      __relocate_a_1(_InputIterator __first, _InputIterator __last,
  .           		   _ForwardIterator __result, _Allocator& __alloc)
  .               noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
  .           					       std::addressof(*__first),
  .           					       __alloc)))
  .               {
  .                 typedef typename iterator_traits<_InputIterator>::value_type
  .           	_ValueType;
  .                 typedef typename iterator_traits<_ForwardIterator>::value_type
  .           	_ValueType2;
  .                 static_assert(std::is_same<_ValueType, _ValueType2>::value,
  .           	  "relocation is only possible for values of the same type");
 16 ( 0.00%)        _ForwardIterator __cur = __result;
 67 ( 0.00%)        for (; __first != __last; ++__first, (void)++__cur)
 91 ( 0.00%)  	std::__relocate_object_a(std::__addressof(*__cur),
882 ( 0.04%)  => /usr/include/c++/11/bits/stl_uninitialized.h:void std::__relocate_object_a<std::pair<int, int>, std::pair<int, int>, std::allocator<std::pair<int, int> > >(std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&) (7x)
 98 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int, int>* std::__addressof<std::pair<int, int> >(std::pair<int, int>&) (14x)
  .           				 std::__addressof(*__first), __alloc);
  8 ( 0.00%)        return __cur;
 24 ( 0.00%)      }
  .           
  .             template <typename _InputIterator, typename _ForwardIterator,
  .           	    typename _Allocator>
  .               inline _ForwardIterator
360 ( 0.01%)      __relocate_a(_InputIterator __first, _InputIterator __last,
  .           		 _ForwardIterator __result, _Allocator& __alloc)
  .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
  .           				     std::__niter_base(__last),
  .           				     std::__niter_base(__result), __alloc)))
  .               {
612 ( 0.03%)        return __relocate_a_1(std::__niter_base(__first),
750 ( 0.03%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&) (28x)
588 ( 0.02%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) (84x)
  .           			    std::__niter_base(__last),
  .           			    std::__niter_base(__result), __alloc);
180 ( 0.01%)      }
  .           
  .             /// @endcond
  .           #endif
  .           
  .             /// @} group memory
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace
-- line 1057 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir           

-- line 3868 ----------------------------------------
  .              *  @param  __last   An input iterator.
  .              *  @param  __val    The value to find.
  .              *  @return   The first iterator @c i in the range @p [__first,__last)
  .              *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  .             */
  .             template<typename _InputIterator, typename _Tp>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _InputIterator
119 ( 0.00%)      find(_InputIterator __first, _InputIterator __last,
  .           	 const _Tp& __val)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  .                 __glibcxx_function_requires(_EqualOpConcept<
  .           		typename iterator_traits<_InputIterator>::value_type, _Tp>)
  .                 __glibcxx_requires_valid_range(__first, __last);
153 ( 0.01%)        return std::__find_if(__first, __last,
3,155 ( 0.13%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>) (17x)
510 ( 0.02%)  => /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_equals_val<int const> __gnu_cxx::__ops::__iter_equals_val<int const>(int const&) (17x)
  .           			    __gnu_cxx::__ops::__iter_equals_val(__val));
 34 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief Find the first element in a sequence for which a
  .              *         predicate is true.
  .              *  @ingroup non_mutating_algorithms
  .              *  @param  __first  An input iterator.
  .              *  @param  __last   An input iterator.
  .              *  @param  __pred   A predicate.
-- line 3894 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir           

-- line 167 ----------------------------------------
  .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           void operator delete[](void*, std::size_t, std::align_val_t)
  .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           #endif // __cpp_sized_deallocation
  .           #endif // __cpp_aligned_new
  .           
  .           // Default placement versions of operator new.
  .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
256 ( 0.01%)  { return __p; }
  .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
  .           { return __p; }
  .           
  .           // Default placement versions of operator delete.
  .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           //@}
  .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir           

-- line 254 ----------------------------------------
  .           
  .             template<typename _Value>
  .               struct _Iter_equals_val
  .               {
  .                 _Value& _M_value;
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 explicit
 85 ( 0.00%)        _Iter_equals_val(_Value& __value)
 51 ( 0.00%)  	: _M_value(__value)
 51 ( 0.00%)        { }
  .           
  .                 template<typename _Iterator>
  .           	_GLIBCXX20_CONSTEXPR
  .           	bool
138 ( 0.01%)  	operator()(_Iterator __it)
253 ( 0.01%)  	{ return *__it == _M_value; }
184 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (23x)
  .               };
  .           
  .             template<typename _Value>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _Iter_equals_val<_Value>
136 ( 0.01%)      __iter_equals_val(_Value& __val)
187 ( 0.01%)      { return _Iter_equals_val<_Value>(__val); }
187 ( 0.01%)  => /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_equals_val<int const>::_Iter_equals_val(int const&) (17x)
  .           
  .             template<typename _Iterator1>
  .               struct _Iter_equals_iter
  .               {
  .                 _Iterator1 _M_it1;
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 explicit
-- line 285 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir           

-- line 41 ----------------------------------------
  .           
  .             // Used, in C++03 mode too, by allocators, etc.
  .             /**
  .              *  @brief Same as C++11 std::addressof
  .              *  @ingroup utilities
  .              */
  .             template<typename _Tp>
  .               inline _GLIBCXX_CONSTEXPR _Tp*
128 ( 0.01%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 96 ( 0.00%)      { return __builtin_addressof(__r); }
  .           
  .           #if __cplusplus >= 201103L
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace
  .           
  .           #include <type_traits> // Brings in std::declval too.
  .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
  .              *  @brief  Forward an lvalue.
  .              *  @return The parameter cast to the specified type.
  .              *
  .              *  This function is used to implement "perfect forwarding".
  .              */
  .             template<typename _Tp>
  .               _GLIBCXX_NODISCARD
  .               constexpr _Tp&&
368 ( 0.02%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
276 ( 0.01%)      { return static_cast<_Tp&&>(__t); }
  .           
  .             /**
  .              *  @brief  Forward an rvalue.
  .              *  @return The parameter cast to the specified type.
  .              *
  .              *  This function is used to implement "perfect forwarding".
  .              */
  .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
  .             /**
  .              *  @brief  Convert a value to an rvalue.
  .              *  @param  __t  A thing of arbitrary type.
  .              *  @return The parameter cast to an rvalue-reference to allow moving it.
  .             */
  .             template<typename _Tp>
  .               _GLIBCXX_NODISCARD
  .               constexpr typename std::remove_reference<_Tp>::type&&
 52 ( 0.00%)      move(_Tp&& __t) noexcept
 39 ( 0.00%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  .           
  .           
  .             template<typename _Tp>
  .               struct __move_if_noexcept_cond
  .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
  .                               is_copy_constructible<_Tp>>::type { };
  .           
  .             /**
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_bvector.h
--------------------------------------------------------------------------------
Ir           

-- line 69 ----------------------------------------
  .             typedef unsigned long _Bit_type;
  .             enum { _S_word_bit = int(__CHAR_BIT__ * sizeof(_Bit_type)) };
  .           
  .             struct _Bit_reference
  .             {
  .               _Bit_type * _M_p;
  .               _Bit_type _M_mask;
  .           
108 ( 0.00%)      _Bit_reference(_Bit_type * __x, _Bit_type __y)
162 ( 0.01%)      : _M_p(__x), _M_mask(__y) { }
  .           
  .               _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }
  .           
  .           #if __cplusplus >= 201103L
  .               _Bit_reference(const _Bit_reference&) = default;
  .           #endif
  .           
 56 ( 0.00%)      operator bool() const _GLIBCXX_NOEXCEPT
140 ( 0.01%)      { return !!(*_M_p & _M_mask); }
  .           
  .               _Bit_reference&
 24 ( 0.00%)      operator=(bool __x) _GLIBCXX_NOEXCEPT
  .               {
  8 ( 0.00%)        if (__x)
 40 ( 0.00%)  	*_M_p |= _M_mask;
  .                 else
  .           	*_M_p &= ~_M_mask;
  4 ( 0.00%)        return *this;
  8 ( 0.00%)      }
  .           
  .               _Bit_reference&
  .               operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT
  .               { return *this = bool(__x); }
  .           
  .               bool
  .               operator==(const _Bit_reference& __x) const
  .               { return bool(*this) == bool(__x); }
-- line 105 ----------------------------------------
-- line 140 ----------------------------------------
  .           #endif
  .           
  .             struct _Bit_iterator_base
  .             : public std::iterator<std::random_access_iterator_tag, bool>
  .             {
  .               _Bit_type * _M_p;
  .               unsigned int _M_offset;
  .           
138 ( 0.01%)      _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
207 ( 0.01%)      : _M_p(__x), _M_offset(__y) { }
  .           
  .               void
  .               _M_bump_up()
  .               {
  .                 if (_M_offset++ == int(_S_word_bit) - 1)
  .           	{
  .           	  _M_offset = 0;
  .           	  ++_M_p;
-- line 157 ----------------------------------------
-- line 164 ----------------------------------------
  .                 if (_M_offset-- == 0)
  .           	{
  .           	  _M_offset = int(_S_word_bit) - 1;
  .           	  --_M_p;
  .           	}
  .               }
  .           
  .               void
 95 ( 0.00%)      _M_incr(ptrdiff_t __i)
  .               {
114 ( 0.00%)        difference_type __n = __i + _M_offset;
209 ( 0.01%)        _M_p += __n / int(_S_word_bit);
133 ( 0.01%)        __n = __n % int(_S_word_bit);
 38 ( 0.00%)        if (__n < 0)
  .           	{
  .           	  __n += int(_S_word_bit);
  .           	  --_M_p;
  .           	}
 76 ( 0.00%)        _M_offset = static_cast<unsigned int>(__n);
 57 ( 0.00%)      }
  .           
  .               friend _GLIBCXX20_CONSTEXPR bool
  .               operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  .               { return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset; }
  .           
  .           #if __cpp_lib_three_way_comparison
  .               friend constexpr strong_ordering
  .               operator<=>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
-- line 191 ----------------------------------------
-- line 233 ----------------------------------------
  .               typedef _Bit_reference  reference;
  .           #if __cplusplus > 201703L
  .               typedef void	    pointer;
  .           #else
  .               typedef _Bit_reference* pointer;
  .           #endif
  .               typedef _Bit_iterator   iterator;
  .           
 52 ( 0.00%)      _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 60 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (4x)
  .           
133 ( 0.01%)      _Bit_iterator(_Bit_type * __x, unsigned int __y)
171 ( 0.01%)      : _Bit_iterator_base(__x, __y) { }
285 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (19x)
  .           
  .               iterator
  .               _M_const_cast() const
  .               { return *this; }
  .           
  .               reference
144 ( 0.01%)      operator*() const
324 ( 0.01%)      { return reference(_M_p, 1UL << _M_offset); }
270 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) (18x)
  .           
  .               iterator&
  .               operator++()
  .               {
  .                 _M_bump_up();
  .                 return *this;
  .               }
  .           
-- line 260 ----------------------------------------
-- line 277 ----------------------------------------
  .               operator--(int)
  .               {
  .                 iterator __tmp = *this;
  .                 _M_bump_down();
  .                 return __tmp;
  .               }
  .           
  .               iterator&
114 ( 0.00%)      operator+=(difference_type __i)
  .               {
 95 ( 0.00%)        _M_incr(__i);
722 ( 0.03%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) (19x)
 19 ( 0.00%)        return *this;
 38 ( 0.00%)      }
  .           
  .               iterator&
  .               operator-=(difference_type __i)
  .               {
  .                 *this += -__i;
  .                 return *this;
  .               }
  .           
  .               reference
162 ( 0.01%)      operator[](difference_type __i) const
270 ( 0.01%)      { return *(*this + __i); }
1,476 ( 0.06%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (18x)
738 ( 0.03%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (18x)
  .           
  .               friend iterator
171 ( 0.01%)      operator+(const iterator& __x, difference_type __n)
  .               {
 95 ( 0.00%)        iterator __tmp = __x;
 95 ( 0.00%)        __tmp += __n;
988 ( 0.04%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) (19x)
114 ( 0.00%)        return __tmp;
 95 ( 0.00%)      }
  .           
  .               friend iterator
  .               operator+(difference_type __n, const iterator& __x)
  .               { return __x + __n; }
  .           
  .               friend iterator
  .               operator-(const iterator& __x, difference_type __n)
  .               {
-- line 316 ----------------------------------------
-- line 435 ----------------------------------------
  .           	  _Bit_type* _M_p;
  .           	  // Allow assignment from iterators (assume offset is zero):
  .           	  void operator=(_Bit_iterator __it) { _M_p = __it._M_p; }
  .           	} _M_start;
  .           #endif
  .           	_Bit_iterator	_M_finish;
  .           	_Bit_pointer	_M_end_of_storage;
  .           
 10 ( 0.00%)  	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 18 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
112 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator() (4x)
  6 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_Bvector_impl_data(const _Bvector_impl_data&) = default;
  .           	_Bvector_impl_data&
  .           	operator=(const _Bvector_impl_data&) = default;
  .           
  .           	_Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
  .           	: _Bvector_impl_data(__x)
-- line 453 ----------------------------------------
-- line 457 ----------------------------------------
  .           	_M_move_data(_Bvector_impl_data&& __x) noexcept
  .           	{
  .           	  *this = __x;
  .           	  __x._M_reset();
  .           	}
  .           #endif
  .           
  .           	void
  9 ( 0.00%)  	_M_reset() _GLIBCXX_NOEXCEPT
 21 ( 0.00%)  	{ *this = _Bvector_impl_data(); }
 73 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (1x)
  .           
  .           	void
  .           	_M_swap_data(_Bvector_impl_data& __x) _GLIBCXX_NOEXCEPT
  .           	{
  .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
  .           	  // information used by TBAA.
  .           	  std::swap(*this, __x);
  .           	}
  .                 };
  .           
 11 ( 0.00%)        struct _Bvector_impl
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::~allocator() (1x)
  .           	: public _Bit_alloc_type, public _Bvector_impl_data
  .                 {
  .           	_Bvector_impl() _GLIBCXX_NOEXCEPT_IF(
  .           	  is_nothrow_default_constructible<_Bit_alloc_type>::value)
  .           	: _Bit_alloc_type()
  .           	{ }
  .           
  6 ( 0.00%)  	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
  8 ( 0.00%)  	: _Bit_alloc_type(__a)
 73 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (1x)
 22 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::allocator(std::allocator<unsigned long> const&) (1x)
  3 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	// Not defaulted, to enforce noexcept(true) even when
  .           	// !is_nothrow_move_constructible<_Bit_alloc_type>.
  .           	_Bvector_impl(_Bvector_impl&& __x) noexcept
  .           	: _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
  .           	{ }
  .           
  .           	_Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
  .           	: _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
  .           	{ }
  .           #endif
  .           
  .           	_Bit_type*
 10 ( 0.00%)  	_M_end_addr() const _GLIBCXX_NOEXCEPT
  .           	{
  8 ( 0.00%)  	  if (this->_M_end_of_storage)
 14 ( 0.00%)  	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 14 ( 0.00%)  => /usr/include/c++/11/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (2x)
  .           	  return 0;
  4 ( 0.00%)  	}
  .                 };
  .           
  .               public:
  .                 typedef _Alloc allocator_type;
  .           
  .                 _Bit_alloc_type&
  .                 _M_get_Bit_allocator() _GLIBCXX_NOEXCEPT
  .                 { return this->_M_impl; }
-- line 515 ----------------------------------------
-- line 523 ----------------------------------------
  .                 { return allocator_type(_M_get_Bit_allocator()); }
  .           
  .           #if __cplusplus >= 201103L
  .                 _Bvector_base() = default;
  .           #else
  .                 _Bvector_base() { }
  .           #endif
  .           
 10 ( 0.00%)        _Bvector_base(const allocator_type& __a)
 20 ( 0.00%)        : _M_impl(__a) { }
112 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_Bvector_impl(std::allocator<unsigned long> const&) (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::allocator<bool>(std::allocator<bool> const&) (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<unsigned long>::~allocator() (1x)
  .           
  .           #if __cplusplus >= 201103L
  .                 _Bvector_base(_Bvector_base&&) = default;
  .           
  .                 _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
  .                 : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
  .                 { }
  .           #endif
  .           
  5 ( 0.00%)        ~_Bvector_base()
  9 ( 0.00%)        { this->_M_deallocate(); }
292 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_deallocate() (1x)
 29 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::~_Bvector_impl() (1x)
  .           
  .               protected:
  .                 _Bvector_impl _M_impl;
  .           
  .                 _Bit_pointer
  6 ( 0.00%)        _M_allocate(size_t __n)
 10 ( 0.00%)        { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
100 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<unsigned long> >::allocate(std::allocator<unsigned long>&, unsigned long) (1x)
  9 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (1x)
  .           
  .                 void
  5 ( 0.00%)        _M_deallocate()
  .                 {
  4 ( 0.00%)  	if (_M_impl._M_start._M_p)
  .           	  {
  8 ( 0.00%)  	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 25 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (1x)
  6 ( 0.00%)  	    _Bit_alloc_traits::deallocate(_M_impl,
130 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<unsigned long> >::deallocate(std::allocator<unsigned long>&, unsigned long*, unsigned long) (1x)
  5 ( 0.00%)  					  _M_impl._M_end_of_storage - __n,
  .           					  __n);
  3 ( 0.00%)  	    _M_impl._M_reset();
103 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_M_reset() (1x)
  .           	  }
  3 ( 0.00%)        }
  .           
  .           #if __cplusplus >= 201103L
  .                 void
  .                 _M_move_data(_Bvector_base&& __x) noexcept
  .                 { _M_impl._M_move_data(std::move(__x._M_impl)); }
  .           #endif
  .           
  .                 static size_t
  8 ( 0.00%)        _S_nword(size_t __n)
 10 ( 0.00%)        { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
  .               };
  .           
  .             /**
  .              *  @brief  A specialization of vector for booleans which offers fixed time
  .              *  access to individual elements in any order.
  .              *
  .              *  @ingroup sequences
  .              *
-- line 581 ----------------------------------------
-- line 639 ----------------------------------------
  .                 : _Base(__a) { }
  .           
  .           #if __cplusplus >= 201103L
  .                 explicit
  .                 vector(size_type __n, const allocator_type& __a = allocator_type())
  .                 : vector(__n, false, __a)
  .                 { }
  .           
  9 ( 0.00%)        vector(size_type __n, const bool& __value,
  .           	     const allocator_type& __a = allocator_type())
  .           #else
  .                 explicit
  .                 vector(size_type __n, const bool& __value = bool(),
  .           	     const allocator_type& __a = allocator_type())
  .           #endif
  5 ( 0.00%)        : _Base(__a)
179 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_base(std::allocator<bool> const&) (1x)
  .                 {
  5 ( 0.00%)  	_M_initialize(__n);
311 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize(unsigned long) (1x)
  7 ( 0.00%)  	_M_initialize_value(__value);
 68 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize_value(bool) (1x)
  4 ( 0.00%)        }
  .           
  .                 vector(const vector& __x)
  .                 : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
  .                 {
  .           	_M_initialize(__x.size());
  .           	_M_copy_aligned(__x.begin(), __x.end(), begin());
  .                 }
  .           
-- line 666 ----------------------------------------
-- line 725 ----------------------------------------
  .           	: _Base(__a)
  .           	{
  .           	  // Check whether it's an integral type. If so, it's not an iterator.
  .           	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
  .           	  _M_initialize_dispatch(__first, __last, _Integral());
  .           	}
  .           #endif
  .           
 11 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT { }
335 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::~_Bvector_base() (1x)
  .           
  .                 vector&
  .                 operator=(const vector& __x)
  .                 {
  .           	if (&__x == this)
  .           	  return *this;
  .           #if __cplusplus >= 201103L
  .           	if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
-- line 741 ----------------------------------------
-- line 823 ----------------------------------------
  .           
  .           #if __cplusplus >= 201103L
  .                 void
  .                 assign(initializer_list<bool> __l)
  .                 { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
  .           #endif
  .           
  .                 iterator
144 ( 0.01%)        begin() _GLIBCXX_NOEXCEPT
324 ( 0.01%)        { return iterator(this->_M_impl._M_start._M_p, 0); }
558 ( 0.02%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (18x)
  .           
  .                 const_iterator
  .                 begin() const _GLIBCXX_NOEXCEPT
  .                 { return const_iterator(this->_M_impl._M_start._M_p, 0); }
  .           
  .                 iterator
  .                 end() _GLIBCXX_NOEXCEPT
  .                 { return this->_M_impl._M_finish; }
-- line 840 ----------------------------------------
-- line 898 ----------------------------------------
  .                 { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
  .           			 - begin()); }
  .           
  .                 _GLIBCXX_NODISCARD bool
  .                 empty() const _GLIBCXX_NOEXCEPT
  .                 { return begin() == end(); }
  .           
  .                 reference
162 ( 0.01%)        operator[](size_type __n)
270 ( 0.01%)        { return begin()[__n]; }
2,646 ( 0.11%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const (18x)
1,026 ( 0.04%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (18x)
  .           
  .                 const_reference
  .                 operator[](size_type __n) const
  .                 { return begin()[__n]; }
  .           
  .               protected:
  .                 void
  .                 _M_range_check(size_type __n) const
-- line 915 ----------------------------------------
-- line 1129 ----------------------------------------
  .           		      iterator __result)
  .                 {
  .           	_Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
  .           	return std::copy(const_iterator(__last._M_p, 0), __last,
  .           			 iterator(__q, 0));
  .                 }
  .           
  .                 void
  9 ( 0.00%)        _M_initialize(size_type __n)
  .                 {
  2 ( 0.00%)  	if (__n)
  .           	  {
  6 ( 0.00%)  	    _Bit_pointer __q = this->_M_allocate(__n);
125 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_allocate(unsigned long) (1x)
  8 ( 0.00%)  	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
  9 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (1x)
  9 ( 0.00%)  	    iterator __start = iterator(std::__addressof(*__q), 0);
 31 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (1x)
  7 ( 0.00%)  => /usr/include/c++/11/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (1x)
  5 ( 0.00%)  	    this->_M_impl._M_start = __start;
 12 ( 0.00%)  	    this->_M_impl._M_finish = __start + difference_type(__n);
 82 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (1x)
  .           	  }
  6 ( 0.00%)        }
  .           
  .                 void
  7 ( 0.00%)        _M_initialize_value(bool __x)
  .                 {
  5 ( 0.00%)  	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
  8 ( 0.00%)  	  __builtin_memset(__p, __x ? ~0 : 0,
 16 ( 0.00%)  => ???:0x000000000010a470 (1x)
  4 ( 0.00%)  			   (this->_M_impl._M_end_addr() - __p)
 25 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (1x)
  .           			   * sizeof(_Bit_type));
  3 ( 0.00%)        }
  .           
  .                 void
  .                 _M_reallocate(size_type __n);
  .           
  .           #if __cplusplus >= 201103L
  .                 bool
  .                 _M_shrink_to_fit();
  .           #endif
-- line 1164 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir           

-- line 89 ----------------------------------------
  .                  	pointer;
  .           
  .                 struct _Vector_impl_data
  .                 {
  .           	pointer _M_start;
  .           	pointer _M_finish;
  .           	pointer _M_end_of_storage;
  .           
 36 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 54 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
 27 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
  .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
  .           	  _M_end_of_storage(__x._M_end_of_storage)
  .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
  .           #endif
  .           
-- line 107 ----------------------------------------
-- line 120 ----------------------------------------
  .           	  // information used by TBAA.
  .           	  _Vector_impl_data __tmp;
  .           	  __tmp._M_copy_data(*this);
  .           	  _M_copy_data(__x);
  .           	  __x._M_copy_data(__tmp);
  .           	}
  .                 };
  .           
 99 ( 0.00%)        struct _Vector_impl
126 ( 0.01%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (7x)
  .           	: public _Tp_alloc_type, public _Vector_impl_data
  .                 {
 30 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
  .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 36 ( 0.00%)  	: _Tp_alloc_type()
 90 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (5x)
 65 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (5x)
 18 ( 0.00%)  	{ }
  .           
 18 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 24 ( 0.00%)  	: _Tp_alloc_type(__a)
 44 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator(std::allocator<int> const&) (2x)
 26 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (2x)
  9 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	// Not defaulted, to enforce noexcept(true) even when
  .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
  .           	_Vector_impl(_Vector_impl&& __x) noexcept
  .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
  .           	{ }
  .           
-- line 146 ----------------------------------------
-- line 268 ----------------------------------------
  .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
  .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  .                 };
  .           
  .               public:
  .                 typedef _Alloc allocator_type;
  .           
  .                 _Tp_alloc_type&
192 ( 0.01%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
144 ( 0.01%)        { return this->_M_impl; }
  .           
  .                 const _Tp_alloc_type&
144 ( 0.01%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
108 ( 0.00%)        { return this->_M_impl; }
  .           
  .                 allocator_type
  .                 get_allocator() const _GLIBCXX_NOEXCEPT
  .                 { return allocator_type(_M_get_Tp_allocator()); }
  .           
  .           #if __cplusplus >= 201103L
 66 ( 0.00%)        _Vector_base() = default;
225 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() (5x)
  .           #else
  .                 _Vector_base() { }
  .           #endif
  .           
  .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
  .                 : _M_impl(__a) { }
  .           
  .                 // Kept for ABI compatibility.
  .           #if !_GLIBCXX_INLINE_VERSION
  .                 _Vector_base(size_t __n)
  .                 : _M_impl()
  .                 { _M_create_storage(__n); }
  .           #endif
  .           
 24 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
 15 ( 0.00%)        : _M_impl(__a)
 52 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::_Vector_impl(std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
 27 ( 0.00%)        { _M_create_storage(__n); }
297 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_create_storage(unsigned long) (1x)
  .           
  .           #if __cplusplus >= 201103L
  .                 _Vector_base(_Vector_base&&) = default;
  .           
  .                 // Kept for ABI compatibility.
  .           # if !_GLIBCXX_INLINE_VERSION
  .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
  .                 : _M_impl(std::move(__a)) { }
-- line 313 ----------------------------------------
-- line 325 ----------------------------------------
  .                 }
  .           # endif
  .           
  .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
  .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
  .                 { }
  .           #endif
  .           
 45 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
  .                 {
 63 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
1,036 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (7x)
 66 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
 54 ( 0.00%)        }
203 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl() (7x)
  .           
  .               public:
  .                 _Vector_impl _M_impl;
  .           
  .                 pointer
126 ( 0.01%)        _M_allocate(size_t __n)
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
168 ( 0.01%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
251 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::allocate(std::allocator<std::vector<int, std::allocator<int> > >&, unsigned long) (1x)
 42 ( 0.00%)        }
  .           
  .                 void
189 ( 0.01%)        _M_deallocate(pointer __p, size_t __n)
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 54 ( 0.00%)  	if (__p)
126 ( 0.01%)  	  _Tr::deallocate(_M_impl, __p, __n);
1,924 ( 0.08%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::pair<int, int> > >::deallocate(std::allocator<std::pair<int, int> >&, std::pair<int, int>*, unsigned long) (4x)
 81 ( 0.00%)        }
  .           
  .               protected:
  .                 void
 18 ( 0.00%)        _M_create_storage(size_t __n)
  .                 {
 21 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
267 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long) (1x)
 12 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
 24 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  9 ( 0.00%)        }
  .               };
  .           
  .             /**
  .              *  @brief A standard container which offers fixed time access to
  .              *  individual elements in any order.
  .              *
  .              *  @ingroup sequences
  .              *
-- line 372 ----------------------------------------
-- line 445 ----------------------------------------
  .                 {
  .           	// Instantiating std::__relocate_a might cause an error outside the
  .           	// immediate context (in __relocate_object_a's noexcept-specifier),
  .           	// so only do it if we know the type can be move-inserted into *this.
  .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
  .                 }
  .           
  .                 static pointer
288 ( 0.01%)        _S_do_relocate(pointer __first, pointer __last, pointer __result,
  .           		     _Tp_alloc_type& __alloc, true_type) noexcept
  .                 {
216 ( 0.01%)  	return std::__relocate_a(__first, __last, __result, __alloc);
1,682 ( 0.07%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::pair<int, int>* std::__relocate_a<std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> > >(std::pair<int, int>*, std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&) (8x)
 72 ( 0.00%)        }
  .           
  .                 static pointer
  .                 _S_do_relocate(pointer, pointer, pointer __result,
  .           		     _Tp_alloc_type&, false_type) noexcept
  .                 { return __result; }
  .           
  .                 static pointer
288 ( 0.01%)        _S_relocate(pointer __first, pointer __last, pointer __result,
  .           		  _Tp_alloc_type& __alloc) noexcept
  .                 {
  .           	using __do_it = __bool_constant<_S_use_relocate()>;
216 ( 0.01%)  	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
1,810 ( 0.07%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_S_do_relocate(std::pair<int, int>*, std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&, std::integral_constant<bool, true>) (8x)
 72 ( 0.00%)        }
  .           #endif // C++11
  .           
  .               protected:
  .                 using _Base::_M_allocate;
  .                 using _Base::_M_deallocate;
  .                 using _Base::_M_impl;
  .                 using _Base::_M_get_Tp_allocator;
  .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
  .               public:
  .                 // [23.2.4.1] construct/copy/destroy
  .                 // (assign() and get_allocator() are also listed in this section)
  .           
  .                 /**
  .                  *  @brief  Creates a %vector with no elements.
  .                  */
  .           #if __cplusplus >= 201103L
 66 ( 0.00%)        vector() = default;
 56 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_base() (1x)
  .           #else
  .                 vector() { }
  .           #endif
  .           
  .                 /**
  .                  *  @brief  Creates a %vector with no elements.
  .                  *  @param  __a  An allocator object.
  .                  */
-- line 495 ----------------------------------------
-- line 502 ----------------------------------------
  .                  *  @brief  Creates a %vector with default constructed elements.
  .                  *  @param  __n  The number of elements to initially create.
  .                  *  @param  __a  An allocator.
  .                  *
  .                  *  This constructor fills the %vector with @a __n default
  .                  *  constructed elements.
  .                  */
  .                 explicit
  8 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
 12 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
371 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
138 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
  9 ( 0.00%)        { _M_default_initialize(__n); }
502 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_default_initialize(unsigned long) (1x)
  .           
  .                 /**
  .                  *  @brief  Creates a %vector with copies of an exemplar element.
  .                  *  @param  __n  The number of elements to initially create.
  .                  *  @param  __value  An element to copy.
  .                  *  @param  __a  An allocator.
  .                  *
  .                  *  This constructor fills the %vector with @a __n copies of @a __value.
  .                  */
 18 ( 0.00%)        vector(size_type __n, const value_type& __value,
  .           	     const allocator_type& __a = allocator_type())
 24 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
586 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (2x)
276 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) (2x)
 20 ( 0.00%)        { _M_fill_initialize(__n, __value); }
390 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_fill_initialize(unsigned long, int const&) (2x)
  .           #else
  .                 /**
  .                  *  @brief  Creates a %vector with copies of an exemplar element.
  .                  *  @param  __n  The number of elements to initially create.
  .                  *  @param  __value  An element to copy.
  .                  *  @param  __a  An allocator.
  .                  *
  .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 533 ----------------------------------------
-- line 670 ----------------------------------------
  .           #endif
  .           
  .                 /**
  .                  *  The dtor only erases the elements, and note that if the
  .                  *  elements themselves are pointers, the pointed-to memory is
  .                  *  not touched in any way.  Managing the pointer is the user's
  .                  *  responsibility.
  .                  */
 45 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
  .                 {
 63 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 37 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::pair<int, int>*, std::pair<int, int> >(std::pair<int, int>*, std::pair<int, int>*, std::allocator<std::pair<int, int> >&) (1x)
 36 ( 0.00%)  		      _M_get_Tp_allocator());
  7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_get_Tp_allocator() (1x)
  .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 54 ( 0.00%)        }
202 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~_Vector_base() (1x)
  .           
  .                 /**
  .                  *  @brief  %Vector assignment operator.
  .                  *  @param  __x  A %vector of identical element and allocator types.
  .                  *
  .                  *  All the elements of @a __x are copied, but any unused capacity in
  .                  *  @a __x will not be copied.
  .                  *
-- line 691 ----------------------------------------
-- line 803 ----------------------------------------
  .           
  .                 // iterators
  .                 /**
  .                  *  Returns a read/write iterator that points to the first
  .                  *  element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 iterator
280 ( 0.01%)        begin() _GLIBCXX_NOEXCEPT
385 ( 0.02%)        { return iterator(this->_M_impl._M_start); }
372 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (31x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points to the
  .                  *  first element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 const_iterator
128 ( 0.01%)        begin() const _GLIBCXX_NOEXCEPT
176 ( 0.01%)        { return const_iterator(this->_M_impl._M_start); }
192 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) (16x)
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points one past the last
  .                  *  element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 iterator
464 ( 0.02%)        end() _GLIBCXX_NOEXCEPT
696 ( 0.03%)        { return iterator(this->_M_impl._M_finish); }
576 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (48x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points one past
  .                  *  the last element in the %vector.  Iteration is done in
  .                  *  ordinary element order.
  .                  */
  .                 const_iterator
128 ( 0.01%)        end() const _GLIBCXX_NOEXCEPT
192 ( 0.01%)        { return const_iterator(this->_M_impl._M_finish); }
192 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) (16x)
  .           
  .                 /**
  .                  *  Returns a read/write reverse iterator that points to the
  .                  *  last element in the %vector.  Iteration is done in reverse
  .                  *  element order.
  .                  */
  .                 reverse_iterator
  .                 rbegin() _GLIBCXX_NOEXCEPT
-- line 847 ----------------------------------------
-- line 910 ----------------------------------------
  .                 const_reverse_iterator
  .                 crend() const noexcept
  .                 { return const_reverse_iterator(begin()); }
  .           #endif
  .           
  .                 // [23.2.4.2] capacity
  .                 /**  Returns the number of elements in the %vector.  */
  .                 size_type
296 ( 0.01%)        size() const _GLIBCXX_NOEXCEPT
666 ( 0.03%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  .           
  .                 /**  Returns the size() of the largest possible %vector.  */
  .                 size_type
180 ( 0.01%)        max_size() const _GLIBCXX_NOEXCEPT
252 ( 0.01%)        { return _S_max_size(_M_get_Tp_allocator()); }
528 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_S_max_size(std::allocator<std::pair<int, int> > const&) (8x)
 56 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_get_Tp_allocator() const (8x)
  .           
  .           #if __cplusplus >= 201103L
  .                 /**
  .                  *  @brief  Resizes the %vector to the specified number of elements.
  .                  *  @param  __new_size  Number of elements the %vector should contain.
  .                  *
  .                  *  This function will %resize the %vector to the specified
  .                  *  number of elements.  If the number is smaller than the
-- line 932 ----------------------------------------
-- line 999 ----------------------------------------
  .                 { return size_type(this->_M_impl._M_end_of_storage
  .           			 - this->_M_impl._M_start); }
  .           
  .                 /**
  .                  *  Returns true if the %vector is empty.  (Thus begin() would
  .                  *  equal end().)
  .                  */
  .                 _GLIBCXX_NODISCARD bool
 32 ( 0.00%)        empty() const _GLIBCXX_NOEXCEPT
 72 ( 0.00%)        { return begin() == end(); }
136 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (4x)
128 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (4x)
124 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (4x)
  .           
  .                 /**
  .                  *  @brief  Attempt to preallocate enough memory for specified number of
  .                  *          elements.
  .                  *  @param  __n  Number of elements required.
  .                  *  @throw  std::length_error  If @a n exceeds @c max_size().
  .                  *
  .                  *  This function attempts to reserve enough memory for the
-- line 1016 ----------------------------------------
-- line 1035 ----------------------------------------
  .                  *  @return  Read/write reference to data.
  .                  *
  .                  *  This operator allows for easy, array-style, data access.
  .                  *  Note that data access with this operator is unchecked and
  .                  *  out_of_range lookups are not defined. (For checked lookups
  .                  *  see at().)
  .                  */
  .                 reference
350 ( 0.01%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
  .                 {
  .           	__glibcxx_requires_subscript(__n);
470 ( 0.02%)  	return *(this->_M_impl._M_start + __n);
140 ( 0.01%)        }
  .           
  .                 /**
  .                  *  @brief  Subscript access to the data contained in the %vector.
  .                  *  @param __n The index of the element for which data should be
  .                  *  accessed.
  .                  *  @return  Read-only (constant) reference to data.
  .                  *
  .                  *  This operator allows for easy, array-style, data access.
  .                  *  Note that data access with this operator is unchecked and
  .                  *  out_of_range lookups are not defined. (For checked lookups
  .                  *  see at().)
  .                  */
  .                 const_reference
 90 ( 0.00%)        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
  .                 {
  .           	__glibcxx_requires_subscript(__n);
144 ( 0.01%)  	return *(this->_M_impl._M_start + __n);
 36 ( 0.00%)        }
  .           
  .               protected:
  .                 /// Safety check used only from at().
  .                 void
  .                 _M_range_check(size_type __n) const
  .                 {
  .           	if (__n >= this->size())
  .           	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
-- line 1073 ----------------------------------------
-- line 1135 ----------------------------------------
  .           	return *begin();
  .                 }
  .           
  .                 /**
  .                  *  Returns a read/write reference to the data at the last
  .                  *  element of the %vector.
  .                  */
  .                 reference
 48 ( 0.00%)        back() _GLIBCXX_NOEXCEPT
  .                 {
  .           	__glibcxx_requires_nonempty();
 72 ( 0.00%)  	return *(end() - 1);
234 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::operator-(long) const (6x)
192 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::end() (6x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::operator*() const (6x)
 30 ( 0.00%)        }
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reference to the data at the
  .                  *  last element of the %vector.
  .                  */
  .                 const_reference
  .                 back() const _GLIBCXX_NOEXCEPT
  .                 {
-- line 1155 ----------------------------------------
-- line 1179 ----------------------------------------
  .                  *
  .                  *  This is a typical stack operation.  The function creates an
  .                  *  element at the end of the %vector and assigns the given data
  .                  *  to it.  Due to the nature of a %vector this operation can be
  .                  *  done in constant time if the %vector has preallocated space
  .                  *  available.
  .                  */
  .                 void
 90 ( 0.00%)        push_back(const value_type& __x)
  .                 {
 90 ( 0.00%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  .           	  {
  .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
  7 ( 0.00%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 62 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) (1x)
  .           				     __x);
  5 ( 0.00%)  	    ++this->_M_impl._M_finish;
  .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
  .           	  }
  .           	else
126 ( 0.01%)  	  _M_realloc_insert(end(), __x);
14,687 ( 0.60%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (14x)
448 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (14x)
 46 ( 0.00%)        }
  .           
  .           #if __cplusplus >= 201103L
  .                 void
 36 ( 0.00%)        push_back(value_type&& __x)
 66 ( 0.00%)        { emplace_back(std::move(__x)); }
8,243 ( 0.34%)  => /usr/include/c++/11/bits/vector.tcc:std::pair<int, int>& std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::emplace_back<std::pair<int, int> >(std::pair<int, int>&&) (6x)
 42 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::pair<int, int>&>::type&& std::move<std::pair<int, int>&>(std::pair<int, int>&) (6x)
  .           
  .                 template<typename... _Args>
  .           #if __cplusplus > 201402L
  .           	reference
  .           #else
  .           	void
  .           #endif
  .           	emplace_back(_Args&&... __args);
-- line 1212 ----------------------------------------
-- line 1585 ----------------------------------------
  .           	    std::__uninitialized_copy_a(__first, __last,
  .           					this->_M_impl._M_start,
  .           					_M_get_Tp_allocator());
  .           	}
  .           
  .                 // Called by the first initialize_dispatch above and by the
  .                 // vector(n,value,a) constructor.
  .                 void
 14 ( 0.00%)        _M_fill_initialize(size_type __n, const value_type& __value)
  .                 {
  4 ( 0.00%)  	this->_M_impl._M_finish =
 12 ( 0.00%)  	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
332 ( 0.01%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_fill_n_a<int*, unsigned long, int, int>(int*, unsigned long, int const&, std::allocator<int>&) (2x)
  8 ( 0.00%)  					_M_get_Tp_allocator());
 14 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (2x)
  6 ( 0.00%)        }
  .           
  .           #if __cplusplus >= 201103L
  .                 // Called by the vector(n) constructor.
  .                 void
  6 ( 0.00%)        _M_default_initialize(size_type __n)
  .                 {
  2 ( 0.00%)  	this->_M_impl._M_finish =
  6 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
474 ( 0.02%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<int, std::allocator<int> >* std::__uninitialized_default_n_a<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::allocator<std::vector<int, std::allocator<int> > >&) (1x)
  4 ( 0.00%)  					   _M_get_Tp_allocator());
  7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator() (1x)
  3 ( 0.00%)        }
  .           #endif
  .           
  .                 // Internal assign functions follow.  The *_aux functions do the actual
  .                 // assignment work for the range versions.
  .           
  .                 // Called by the range assign to implement [23.1.1]/9
  .           
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1616 ----------------------------------------
-- line 1748 ----------------------------------------
  .                 // Emplacing an rvalue of the correct type can use _M_insert_rval.
  .                 iterator
  .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
  .                 { return _M_insert_rval(__position, std::move(__v)); }
  .           #endif
  .           
  .                 // Called by _M_fill_insert, _M_insert_aux etc.
  .                 size_type
198 ( 0.01%)        _M_check_len(size_type __n, const char* __s) const
  .                 {
252 ( 0.01%)  	if (max_size() - size() < __n)
340 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::max_size() const (4x)
 52 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::size() const (4x)
  .           	  __throw_length_error(__N(__s));
  .           
288 ( 0.01%)  	const size_type __len = size() + (std::max)(size(), __n);
104 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::size() const (8x)
 57 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (4x)
198 ( 0.01%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
340 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::max_size() const (4x)
 52 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::size() const (4x)
108 ( 0.00%)        }
  .           
  .                 // Called by constructors to check initial size.
  .                 static size_type
 30 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
  .                 {
 45 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
132 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) (2x)
 44 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator(std::allocator<int> const&) (2x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (2x)
  .           	  __throw_length_error(
  .           	      __N("cannot create std::vector larger than max_size()"));
  3 ( 0.00%)  	return __n;
 18 ( 0.00%)        }
  .           
  .                 static size_type
312 ( 0.01%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .                 {
  .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
  .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
  .           	// (even if std::allocator_traits::max_size says we can).
 78 ( 0.00%)  	const size_t __diffmax
  .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
156 ( 0.01%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
810 ( 0.03%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) (30x)
234 ( 0.01%)  	return (std::min)(__diffmax, __allocmax);
420 ( 0.02%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (30x)
195 ( 0.01%)        }
  .           
  .                 // Internal erase functions follow.
  .           
  .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
  .                 // _M_assign_aux.
  .                 void
  .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
  .                 {
-- line 1793 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: graph.cpp
--------------------------------------------------------------------------------
Ir           

  .           #include "graph.hpp"           
  .           #include <iostream>       
  .           #include <algorithm>   
  .           #include <stack>
  .           
  .           // Constructor for the Graph class
 39 ( 0.00%)  Graph::Graph(int vertices, bool directed) : numVertices(vertices),  directed(directed), adjList(vertices) {}       
1,040 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<int, std::allocator<int> > >::allocator() (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<int, std::allocator<int> > >::~allocator() (1x)
  .           
  .           // Function to add an edge between two vertices u and v
 60 ( 0.00%)  void Graph::addEdge(int u, int v) {
100 ( 0.00%)      if (u < 0 || u >= numVertices || v < 0 || v >= numVertices || u == v) {  // Check if u and v are valid indices
  .                   throw std::invalid_argument("Error: Invalid vertex index.\n");  // Throw error if they are out of range                                           
  .               }
215 ( 0.01%)      if(find(adjList[u].begin(), adjList[u].end(), v) == adjList[u].end()){
1,061 ( 0.04%)  => /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::find<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (5x)
320 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (10x)
225 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (15x)
170 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (5x)
155 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (5x)
 60 ( 0.00%)          adjList[u].push_back(v); // Add v to u's adjacency list
5,430 ( 0.22%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (5x)
 75 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (5x)
  .               }
 25 ( 0.00%)      if (!directed) { // If the graph is undirected
215 ( 0.01%)          if(find(adjList[v].begin(), adjList[v].end(), u) == adjList[v].end()){
1,061 ( 0.04%)  => /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::find<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (5x)
320 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (10x)
225 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (15x)
170 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (5x)
155 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (5x)
 60 ( 0.00%)              adjList[v].push_back(u);// Add u to v's adjacency list as well
5,430 ( 0.22%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (5x)
 75 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (5x)
  .                   }
  .               }
 50 ( 0.00%)  }
  .           
  .           // Function to remove an edge between two vertices u and v
  .           void Graph::removeEdge(int u, int v) {
  .               if (u < 0 || u >= numVertices || v < 0 || v >= numVertices || u == v) {  // Check if u and v are valid indices
  .                   throw std::invalid_argument("Error: Invalid vertex index.\n");  // Throw error if they are out of range ;                                                
  .               }
  .               auto& neighborsU = adjList[u]; // Reference to u's adjacency list
  .               neighborsU.erase(                                              
-- line 30 ----------------------------------------
-- line 36 ----------------------------------------
  .                   neighborsV.erase(                                          
  .                       std::remove(neighborsV.begin(), neighborsV.end(), u),  // Find u in v's list and move it to the end
  .                       neighborsV.end() // Erase the found element(s)
  .                   );
  .               }
  .           }
  .           
  .           // Function to print the adjacency list of the graph
  8 ( 0.00%)  void Graph::printGraph() const {
 26 ( 0.00%)      for (int i = 0; i < numVertices; i++) {       
 40 ( 0.00%)          std::cout << i << ": "; // Print the current vertex index
8,110 ( 0.33%)  => ???:0x000000000010a680 (4x)
3,066 ( 0.13%)  => ???:0x000000000010a540 (4x)
246 ( 0.01%)          for (int neighbor : adjList[i]) {         
476 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (14x)
128 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (4x)
124 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (4x)
120 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (10x)
 80 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (10x)
 60 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (4x)
100 ( 0.00%)              std::cout << neighbor << " "; // Print each neighbor
3,986 ( 0.16%)  => ???:0x000000000010a680 (10x)
2,730 ( 0.11%)  => ???:0x000000000010a540 (10x)
  .                   }
 20 ( 0.00%)          std::cout << std::endl; // Move to a new line after printing all neighbors
4,494 ( 0.18%)  => ???:0x000000000010a570 (4x)
  .               }
  6 ( 0.00%)  }
  .           
  .           // Function to get the list of neighbors for vertex v
  .           const std::vector<int>& Graph::getNeighbors(int v) const {
  .               if(v < 0 || v >= numVertices){
  .                   throw std::invalid_argument("Error: Invalid vertex index.\n");  // Throw error if they are out of range ; 
  .               }
  .               return adjList[v];         
  .           }
  .           
  .           // Function to get the total number of vertices in the graph
  .           int Graph::getNumVertices() const {
  .               return numVertices;                        
  .           }
  .           
  .           // Depth-First Search helper function to mark all reachable vertices
 44 ( 0.00%)  void Graph::dfs(int v, vector<bool>& visited, const vector<vector<int>>& localAdjList) const {
 48 ( 0.00%)      visited[v] = true; // Mark the current vertex as visited
228 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (1x)
 21 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (1x)
  .           
  .               // Loop over all neighbors of vertex v
242 ( 0.01%)      for (int neighbor : localAdjList[v]) {
102 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (3x)
 32 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (1x)
 31 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (1x)
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (2x)
 16 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (2x)
 15 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (1x)
  .                   // If the neighbor hasn't been visited yet, visit it recursively
140 ( 0.01%)          if (!visited[neighbor]) {
456 ( 0.02%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (2x)
 28 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (2x)
 18 ( 0.00%)              dfs(neighbor, visited, localAdjList);
3,851 ( 0.16%)  => graph.cpp:Graph::dfs(int, std::vector<bool, std::allocator<bool> >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) const'2 (1x)
  .                   }
  .               }
 24 ( 0.00%)  }
  .           
  .           // Checks whether the graph contains an Euler circuit
  9 ( 0.00%)  bool Graph::hasEulerCircuit() const {
 15 ( 0.00%)      vector<bool> visited(numVertices, false); // Visited array for DFS
588 ( 0.02%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&) (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::allocator() (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<bool>::~allocator() (1x)
  1 ( 0.00%)      int start = -1; // First vertex with edges
  .           
 30 ( 0.00%)      vector<int> indeg(numVertices, 0), outdeg(numVertices, 0); // Degree counters
1,314 ( 0.05%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (2x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (2x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (2x)
  .           
  .               // Find a vertex with edges and calculate in/out degrees
 26 ( 0.00%)      for (int u = 0; u < numVertices; ++u) {
246 ( 0.01%)          for (int v : adjList[u]) {
476 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (14x)
 60 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (4x)
128 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (4x)
124 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (4x)
120 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (10x)
 80 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (10x)
 90 ( 0.00%)              outdeg[u]++;
120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (10x)
 90 ( 0.00%)              indeg[v]++;
120 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (10x)
 22 ( 0.00%)              if (start == -1) start = u;
  .                   }
  .               }
  .               // No edges in the graph
  2 ( 0.00%)      if (start == -1) return false;
  4 ( 0.00%)      if (directed) {
  .                   // Check if in-degree equals out-degree for all vertices
  .                   for (int i = 0; i < numVertices; ++i) {
  .                       if (indeg[i] != outdeg[i]) return false;
  .                   }
  .                   // DFS in original graph
  .                   dfs(start, visited, adjList);
  .                   for (int i = 0; i < numVertices; ++i) {
  .                       if ((indeg[i] + outdeg[i] > 0) && !visited[i]) return false;
-- line 105 ----------------------------------------
-- line 113 ----------------------------------------
  .                   for (int i = 0; i < numVertices; ++i) {
  .                       if ((indeg[i] + outdeg[i] > 0) && !visited[i]) return false;
  .                   }
  .           
  .                   return true;
  .               } 
  .               else {
  .                   // DFS in undirected graph
  7 ( 0.00%)          dfs(start, visited, adjList);
4,920 ( 0.20%)  => graph.cpp:Graph::dfs(int, std::vector<bool, std::allocator<bool> >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) const (1x)
 26 ( 0.00%)          for (int i = 0; i < numVertices; ++i) {
116 ( 0.00%)              if (!adjList[i].empty() && !visited[i]) return false;
912 ( 0.04%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (4x)
492 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::empty() const (4x)
 60 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (4x)
 56 ( 0.00%)  => /usr/include/c++/11/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (4x)
  .                   }
  .                   // Check all vertices have even degree
 11 ( 0.00%)          for (int i = 0; i < numVertices; ++i) {
 30 ( 0.00%)              if (adjList[i].size() % 2 != 0) return false;
 30 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (2x)
 26 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (2x)
  .                   }
  .           
  .                   return true;
  .               }
 16 ( 0.00%)  }
536 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
346 ( 0.01%)  => /usr/include/c++/11/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::~vector() (1x)
  .           
  .           
  .           // Finds and returns an Euler circuit starting from the given vertex
  .           vector<int> Graph::findEulerCircuit(int start) {
  .               vector<int> circuit;
  .           
  .               // If the graph does not have an Euler circuit, return an empty vector
  .               if (!hasEulerCircuit()) return circuit;
-- line 140 ----------------------------------------
-- line 167 ----------------------------------------
  .               return result;// Return the final Euler circuit
  .           }
  .           
  .           void Graph::removeAllEdges(){
  .               for (auto &inner : adjList) {
  .                   inner.clear();
  .               }
  .               adjList.clear();
 21 ( 0.00%)  }
127 ( 0.01%)  => graph.cpp:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir           

-- line 71 ----------------------------------------
  .           
  .           #if __cplusplus >= 201103L
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 2103. propagate_on_container_move_assignment
  .                 typedef std::true_type propagate_on_container_move_assignment;
  .           #endif
  .           
  .                 _GLIBCXX20_CONSTEXPR
 77 ( 0.00%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .           
  .                 _GLIBCXX20_CONSTEXPR
 56 ( 0.00%)        new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  .           
  .                 template<typename _Tp1>
  .           	_GLIBCXX20_CONSTEXPR
  .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  .           
  .           #if __cplusplus <= 201703L
126 ( 0.01%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  .           
  .                 pointer
  .                 address(reference __x) const _GLIBCXX_NOEXCEPT
  .                 { return std::__addressof(__x); }
  .           
  .                 const_pointer
  .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
  .                 { return std::__addressof(__x); }
  .           #endif
  .           
  .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
  .                 // about what the return value is when __n == 0.
  .                 _GLIBCXX_NODISCARD _Tp*
154 ( 0.01%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
  .                 {
  .           #if __cplusplus >= 201103L
  .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           	 // 3308. std::allocator<void>().allocate(n)
  .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
  .           #endif
  .           
220 ( 0.01%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
 28 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<int, int> >::_M_max_size() const (4x)
  .           	  {
  .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .           	    // 3190. allocator::allocate sometimes returns too little storage
  .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
  .           	      std::__throw_bad_array_new_length();
  .           	    std::__throw_bad_alloc();
  .           	  }
  .           
  .           #if __cpp_aligned_new
  .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .           	  {
  .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
  .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
  .           	  }
  .           #endif
113 ( 0.00%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
806 ( 0.03%)  => ???:0x000000000010a550 (4x)
 44 ( 0.00%)        }
  .           
  .                 // __p is not permitted to be a null pointer.
  .                 void
154 ( 0.01%)        deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
  .                 {
  .           #if __cpp_aligned_new
  .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
  .           	  {
  .           	    ::operator delete(__p,
  .           # if __cpp_sized_deallocation
  .           			      __t * sizeof(_Tp),
  .           # endif
  .           			      std::align_val_t(alignof(_Tp)));
  .           	    return;
  .           	  }
  .           #endif
136 ( 0.01%)  	::operator delete(__p
1,800 ( 0.07%)  => ???:0x000000000010a560 (4x)
  .           #if __cpp_sized_deallocation
  .           			  , __t * sizeof(_Tp)
  .           #endif
  .           			 );
 44 ( 0.00%)        }
  .           
  .           #if __cplusplus <= 201703L
  .                 size_type
195 ( 0.01%)        max_size() const _GLIBCXX_USE_NOEXCEPT
195 ( 0.01%)        { return _M_max_size(); }
  7 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::_M_max_size() const (1x)
  .           
  .           #if __cplusplus >= 201103L
  .                 template<typename _Up, typename... _Args>
  .           	void
224 ( 0.01%)  	construct(_Up* __p, _Args&&... __args)
  .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
377 ( 0.02%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
104 ( 0.00%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (13x)
 91 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int, int>&& std::forward<std::pair<int, int> >(std::remove_reference<std::pair<int, int> >::type&) (13x)
  .           
  .                 template<typename _Up>
  .           	void
 35 ( 0.00%)  	destroy(_Up* __p)
  .           	noexcept(std::is_nothrow_destructible<_Up>::value)
 21 ( 0.00%)  	{ __p->~_Up(); }
  .           #else
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 402. wrong new expression in [some_] allocator::construct
  .                 void
  .                 construct(pointer __p, const _Tp& __val)
  .                 { ::new((void *)__p) _Tp(__val); }
  .           
  .                 void
-- line 176 ----------------------------------------
-- line 189 ----------------------------------------
  .           	friend _GLIBCXX20_CONSTEXPR bool
  .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
  .           	_GLIBCXX_NOTHROW
  .           	{ return false; }
  .           #endif
  .           
  .               private:
  .                 _GLIBCXX_CONSTEXPR size_type
244 ( 0.01%)        _M_max_size() const _GLIBCXX_USE_NOEXCEPT
  .                 {
  .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 61 ( 0.00%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
  .           #else
  .           	return std::size_t(-1) / sizeof(_Tp);
  .           #endif
122 ( 0.00%)        }
  .               };
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace
  .           
  .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir           

-- line 455 ----------------------------------------
  .                 /**
  .                  *  @brief  Allocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __n  The number of objects to allocate space for.
  .                  *
  .                  *  Calls @c a.allocate(n)
  .                 */
  .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
132 ( 0.01%)        allocate(allocator_type& __a, size_type __n)
176 ( 0.01%)        { return __a.allocate(__n); }
237 ( 0.01%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*) (1x)
  .           
  .                 /**
  .                  *  @brief  Allocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __n  The number of objects to allocate space for.
  .                  *  @param  __hint Aid to locality.
  .                  *  @return Memory of suitable size and alignment for @a n objects
  .                  *          of type @c value_type
-- line 472 ----------------------------------------
-- line 487 ----------------------------------------
  .                  *  @brief  Deallocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to the memory to deallocate.
  .                  *  @param  __n  The number of objects space was allocated for.
  .                  *
  .                  *  Calls <tt> a.deallocate(p, n) </tt>
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR void
154 ( 0.01%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
198 ( 0.01%)        { __a.deallocate(__p, __n); }
114 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<unsigned long>::deallocate(unsigned long*, unsigned long) (1x)
  .           
  .                 /**
  .                  *  @brief  Construct an object of type `_Up`
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to memory of suitable size and alignment for
  .                  *	       an object of type `_Up`.
  .                  *  @param  __args Constructor arguments.
  .                  *
  .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
  .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
  .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
  .                 */
  .                 template<typename _Up, typename... _Args>
  .           	static _GLIBCXX20_CONSTEXPR void
196 ( 0.01%)  	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
  .           		  _Args&&... __args)
  .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  .           	{
  .           #if __cplusplus <= 201703L
252 ( 0.01%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
540 ( 0.02%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&) (15x)
105 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (15x)
  .           #else
  .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
  .           #endif
 84 ( 0.00%)  	}
  .           
  .                 /**
  .                  *  @brief  Destroy an object of type @a _Up
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to the object to destroy
  .                  *
  .                  *  Calls @c __a.destroy(__p).
  .                 */
  .                 template<typename _Up>
  .           	static _GLIBCXX20_CONSTEXPR void
 42 ( 0.00%)  	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
  .           	noexcept(is_nothrow_destructible<_Up>::value)
  .           	{
  .           #if __cplusplus <= 201703L
 35 ( 0.00%)  	  __a.destroy(__p);
 56 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::pair<int, int> >::destroy<std::pair<int, int> >(std::pair<int, int>*) (7x)
  .           #else
  .           	  std::destroy_at(__p);
  .           #endif
 21 ( 0.00%)  	}
  .           
  .                 /**
  .                  *  @brief  The maximum supported allocation size
  .                  *  @param  __a  An allocator.
  .                  *  @return @c __a.max_size()
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR size_type
195 ( 0.01%)        max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
  .                 {
  .           #if __cplusplus <= 201703L
117 ( 0.00%)  	return __a.max_size();
510 ( 0.02%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::max_size() const (30x)
  .           #else
  .           	return size_t(-1) / sizeof(value_type);
  .           #endif
 78 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @brief  Obtain an allocator to use when copying a container.
  .                  *  @param  __rhs  An allocator.
  .                  *  @return @c __rhs
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR allocator_type
  .                 select_on_container_copy_construction(const allocator_type& __rhs)
-- line 562 ----------------------------------------
-- line 837 ----------------------------------------
  .           #else
  .           	allocator_traits<_Allocator>::destroy(__alloc,
  .           					      std::__addressof(*__first));
  .           #endif
  .               }
  .           
  .             template<typename _ForwardIterator, typename _Tp>
  .               inline void
 63 ( 0.00%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  .           	     allocator<_Tp>&)
  .               {
 45 ( 0.00%)        _Destroy(__first, __last);
 22 ( 0.00%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::pair<int, int>*>(std::pair<int, int>*, std::pair<int, int>*) (1x)
 27 ( 0.00%)      }
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace std
  .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir           

-- line 101 ----------------------------------------
  .           #if __cplusplus >= 201103L
  .             template<typename _Tp, typename _Alloc>
  .               template<typename... _Args>
  .           #if __cplusplus > 201402L
  .                 typename vector<_Tp, _Alloc>::reference
  .           #else
  .                 void
  .           #endif
 42 ( 0.00%)        vector<_Tp, _Alloc>::
  .                 emplace_back(_Args&&... __args)
  .                 {
 36 ( 0.00%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  .           	  {
  .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 20 ( 0.00%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
126 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, int> > >::construct<std::pair<int, int>, std::pair<int, int> >(std::allocator<std::pair<int, int> >&, std::pair<int, int>*, std::pair<int, int>&&) (2x)
 14 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int, int>&& std::forward<std::pair<int, int> >(std::remove_reference<std::pair<int, int> >::type&) (2x)
  .           				     std::forward<_Args>(__args)...);
 12 ( 0.00%)  	    ++this->_M_impl._M_finish;
  .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
  .           	  }
  .           	else
 52 ( 0.00%)  	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
7,125 ( 0.29%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_realloc_insert<std::pair<int, int> >(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::pair<int, int>&&) (4x)
128 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::end() (4x)
 28 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int, int>&& std::forward<std::pair<int, int> >(std::remove_reference<std::pair<int, int> >::type&) (4x)
  .           #if __cplusplus > 201402L
 18 ( 0.00%)  	return back();
624 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::back() (6x)
  .           #endif
 18 ( 0.00%)        }
  .           #endif
  .           
  .             template<typename _Tp, typename _Alloc>
  .               typename vector<_Tp, _Alloc>::iterator
  .               vector<_Tp, _Alloc>::
  .           #if __cplusplus >= 201103L
  .               insert(const_iterator __position, const value_type& __x)
  .           #else
-- line 133 ----------------------------------------
-- line 418 ----------------------------------------
  .                 *__position = std::forward<_Arg>(__arg);
  .           #endif
  .               }
  .           
  .           #if __cplusplus >= 201103L
  .             template<typename _Tp, typename _Alloc>
  .               template<typename... _Args>
  .                 void
198 ( 0.01%)        vector<_Tp, _Alloc>::
  .                 _M_realloc_insert(iterator __position, _Args&&... __args)
  .           #else
  .             template<typename _Tp, typename _Alloc>
  .               void
  .               vector<_Tp, _Alloc>::
  .               _M_realloc_insert(iterator __position, const _Tp& __x)
  .           #endif
  .               {
  .                 const size_type __len =
108 ( 0.00%)  	_M_check_len(size_type(1), "vector::_M_realloc_insert");
4,121 ( 0.17%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const (14x)
 54 ( 0.00%)        pointer __old_start = this->_M_impl._M_start;
 54 ( 0.00%)        pointer __old_finish = this->_M_impl._M_finish;
180 ( 0.01%)        const size_type __elems_before = __position - begin();
490 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (14x)
434 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (14x)
108 ( 0.00%)        pointer __new_start(this->_M_allocate(__len));
2,208 ( 0.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (14x)
 36 ( 0.00%)        pointer __new_finish(__new_start);
  .                 __try
  .           	{
  .           	  // The order of the three operations is dictated by the C++11
  .           	  // case, where the moves could alter a new element belonging
  .           	  // to the existing vector.  This is an issue only for callers
  .           	  // taking the element by lvalue ref (see last bullet of C++11
  .           	  // [res.on.arguments]).
180 ( 0.01%)  	  _Alloc_traits::construct(this->_M_impl,
868 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) (14x)
 98 ( 0.00%)  => /usr/include/c++/11/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (14x)
 36 ( 0.00%)  				   __new_start + __elems_before,
  .           #if __cplusplus >= 201103L
  .           				   std::forward<_Args>(__args)...);
  .           #else
  .           				   __x);
  .           #endif
 18 ( 0.00%)  	  __new_finish = pointer();
  .           
  .           #if __cplusplus >= 201103L
  .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  .           	    {
180 ( 0.01%)  	      __new_finish = _S_relocate(__old_start, __position.base(),
1,660 ( 0.07%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) (14x)
 98 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (14x)
 72 ( 0.00%)  					 __new_start, _M_get_Tp_allocator());
 98 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (14x)
  .           
 18 ( 0.00%)  	      ++__new_finish;
  .           
180 ( 0.01%)  	      __new_finish = _S_relocate(__position.base(), __old_finish,
1,470 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) (14x)
 98 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (14x)
 72 ( 0.00%)  					 __new_finish, _M_get_Tp_allocator());
 98 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (14x)
  .           	    }
  .           	  else
  .           #endif
  .           	    {
  .           	      __new_finish
  .           		= std::__uninitialized_move_if_noexcept_a
  .           		(__old_start, __position.base(),
  .           		 __new_start, _M_get_Tp_allocator());
-- line 475 ----------------------------------------
-- line 492 ----------------------------------------
  .           	  _M_deallocate(__new_start, __len);
  .           	  __throw_exception_again;
  .           	}
  .           #if __cplusplus >= 201103L
  .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
  .           #endif
  .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
  .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
 90 ( 0.00%)        _M_deallocate(__old_start,
1,392 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (14x)
 72 ( 0.00%)  		    this->_M_impl._M_end_of_storage - __old_start);
 54 ( 0.00%)        this->_M_impl._M_start = __new_start;
 54 ( 0.00%)        this->_M_impl._M_finish = __new_finish;
108 ( 0.00%)        this->_M_impl._M_end_of_storage = __new_start + __len;
126 ( 0.01%)      }
  .           
  .             template<typename _Tp, typename _Alloc>
  .               void
  .               vector<_Tp, _Alloc>::
  .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
  .               {
  .                 if (__n != 0)
  .           	{
-- line 513 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir             

-- line 1019 ----------------------------------------
    .           #if __cplusplus > 201703L && __cpp_lib_concepts
    .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
    .           #endif
    .           
    .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
    .                 : _M_current(_Iterator()) { }
    .           
    .                 explicit _GLIBCXX20_CONSTEXPR
  655 ( 0.03%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  917 ( 0.04%)        : _M_current(__i) { }
    .           
    .                 // Allow iterator to const_iterator conversion
    .                 template<typename _Iter>
    .                   _GLIBCXX20_CONSTEXPR
    .                   __normal_iterator(const __normal_iterator<_Iter,
    .           			  typename __enable_if<
    .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
    .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
    .                   : _M_current(__i.base()) { }
    .           
    .                 // Forward iterator requirements
    .                 _GLIBCXX20_CONSTEXPR
    .                 reference
  236 ( 0.01%)        operator*() const _GLIBCXX_NOEXCEPT
  236 ( 0.01%)        { return *_M_current; }
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 pointer
    .                 operator->() const _GLIBCXX_NOEXCEPT
    .                 { return _M_current; }
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 __normal_iterator&
  204 ( 0.01%)        operator++() _GLIBCXX_NOEXCEPT
    .                 {
  255 ( 0.01%)  	++_M_current;
   51 ( 0.00%)  	return *this;
  102 ( 0.00%)        }
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 __normal_iterator
    .                 operator++(int) _GLIBCXX_NOEXCEPT
    .                 { return __normal_iterator(_M_current++); }
    .           
    .                 // Bidirectional iterator requirements
    .                 _GLIBCXX20_CONSTEXPR
-- line 1064 ----------------------------------------
-- line 1092 ----------------------------------------
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 __normal_iterator&
    .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
    .                 { _M_current -= __n; return *this; }
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 __normal_iterator
   54 ( 0.00%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
  108 ( 0.00%)        { return __normal_iterator(_M_current - __n); }
   72 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int>* const&) (6x)
    .           
    .                 _GLIBCXX20_CONSTEXPR
    .                 const _Iterator&
1,056 ( 0.04%)        base() const _GLIBCXX_NOEXCEPT
  792 ( 0.03%)        { return _M_current; }
    .               };
    .           
    .             // Note: In what follows, the left- and right-hand-side iterators are
    .             // allowed to vary in types (conceptually in cv-qualification) so that
    .             // comparison between cv-qualified and non-cv-qualified iterators be
    .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
    .             // will make overload resolution ambiguous (when in scope) if we don't
    .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1155 ----------------------------------------
    .               operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
    .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
    .               { return __lhs.base() == __rhs.base(); }
    .           
    .             template<typename _Iterator, typename _Container>
    .               _GLIBCXX20_CONSTEXPR
    .               inline bool
   98 ( 0.00%)      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
    .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
  182 ( 0.01%)      { return __lhs.base() == __rhs.base(); }
  140 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (20x)
    .           
    .             template<typename _IteratorL, typename _IteratorR, typename _Container>
    .               _GLIBCXX20_CONSTEXPR
    .               inline bool
    .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
    .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
    .               { return __lhs.base() != __rhs.base(); }
    .           
    .             template<typename _Iterator, typename _Container>
    .               _GLIBCXX20_CONSTEXPR
    .               inline bool
  343 ( 0.01%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
  637 ( 0.03%)      { return __lhs.base() != __rhs.base(); }
   98 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (14x)
    .           
    .             // Random access iterator requirements
    .             template<typename _IteratorL, typename _IteratorR, typename _Container>
    .               inline bool
    .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
    .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
    .               { return __lhs.base() < __rhs.base(); }
-- line 1190 ----------------------------------------
-- line 1260 ----------------------------------------
    .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
    .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    .           #endif
    .               { return __lhs.base() - __rhs.base(); }
    .           
    .             template<typename _Iterator, typename _Container>
    .               _GLIBCXX20_CONSTEXPR
    .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
  357 ( 0.01%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
    .               _GLIBCXX_NOEXCEPT
  714 ( 0.03%)      { return __lhs.base() - __rhs.base(); }
   56 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::base() const (8x)
    .           
    .             template<typename _Iterator, typename _Container>
    .               _GLIBCXX20_CONSTEXPR
    .               inline __normal_iterator<_Iterator, _Container>
    .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
    .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
    .               _GLIBCXX_NOEXCEPT
    .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1279 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../bits/stdlib-bsearch.h
  ./elf/../elf/dl-sysdep.c
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/generic/dl-protected.h
  ./elf/../sysdeps/generic/ldsodefs.h
  ./elf/../sysdeps/nptl/dl-tls_init_tp.c
  ./elf/../sysdeps/x86/dl-cacheinfo.h
  ./elf/../sysdeps/x86/dl-prop.h
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/dl-trampoline.h
  ./elf/./dl-find_object.h
  ./elf/./dl-map-segments.h
  ./elf/./elf/dl-cache.c
  ./elf/./elf/dl-deps.c
  ./elf/./elf/dl-environ.c
  ./elf/./elf/dl-error-skeleton.c
  ./elf/./elf/dl-find_object.c
  ./elf/./elf/dl-fini.c
  ./elf/./elf/dl-hwcaps.c
  ./elf/./elf/dl-hwcaps_split.c
  ./elf/./elf/dl-init.c
  ./elf/./elf/dl-load.c
  ./elf/./elf/dl-lookup-direct.c
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-minimal-malloc.c
  ./elf/./elf/dl-minimal.c
  ./elf/./elf/dl-misc.c
  ./elf/./elf/dl-object.c
  ./elf/./elf/dl-profstub.c
  ./elf/./elf/dl-reloc.c
  ./elf/./elf/dl-runtime.c
  ./elf/./elf/dl-setup_hash.c
  ./elf/./elf/dl-sort-maps.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./elf/./elf/get-dynamic-info.h
  ./elf/./elf/rtld.c
  ./elf/./get-dynamic-info.h
  ./iconv/./iconv/gconv_simple.c
  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c
  ./libio/./libio/fileops.c
  ./libio/./libio/iofflush.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/libioP.h
  ./malloc/./malloc/malloc.c
  ./misc/../sysdeps/unix/sysv/linux/mmap64.c
  ./posix/./posix/getopt.c
  ./setjmp/../sysdeps/x86_64/setjmp.S
  ./stdlib/../stdlib/strtol_l.c
  ./stdlib/./stdlib/cxa_atexit.c
  ./stdlib/./stdlib/cxa_finalize.c
  ./stdlib/./stdlib/exit.c
  ./stdlib/./stdlib/getenv.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/../strchr.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-sse4.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S
  ./string/../sysdeps/x86_64/strcmp.S
  ./string/../sysdeps/x86_64/strcspn.S
  ./wcsmbs/./wcsmbs/btowc.c
  ./wcsmbs/./wcsmbs/wctob.c
  ./wcsmbs/./wcsmbsload.h
  ./wctype/./wctype/wctype_l.c

--------------------------------------------------------------------------------
Ir              
--------------------------------------------------------------------------------
42,568 ( 1.74%)  events annotated

