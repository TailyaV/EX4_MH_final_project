        -:    0:Source:graph.cpp
        -:    0:Graph:graph.gcno
        -:    0:Data:graph.gcda
        -:    0:Runs:1
        -:    1:#include "graph.hpp"           
        -:    2:#include <iostream>       
        -:    3:#include <algorithm>            
        -:    4:
        -:    5:// Constructor for the Graph class
        1:    6:Graph::Graph(int vertices, bool directed) 
        1:    7:    : numVertices(vertices),  
        1:    8:      directed(directed),        
        1:    9:      adjList(vertices) {}       
        -:   10:
        -:   11:// Function to add an edge between two vertices u and v
        8:   12:void Graph::addEdge(int u, int v) {
        8:   13:    if (u < 0 || u >= numVertices || v < 0 || v >= numVertices) {  // Check if u and v are valid indices
        1:   14:        std::cout << "Error: Invalid vertex index." << std::endl;  // Print error if they are out of range
        1:   15:        return;                                                   
        -:   16:    }
        7:   17:    adjList[u].push_back(v); // Add v to u's adjacency list
        7:   18:    if (!directed) { // If the graph is undirected
        7:   19:        adjList[v].push_back(u);// Add u to v's adjacency list as well
        -:   20:    }
        -:   21:}
        -:   22:
        -:   23:// Function to remove an edge between two vertices u and v
        2:   24:void Graph::removeEdge(int u, int v) {
        2:   25:    if (u < 0 || u >= numVertices || v < 0 || v >= numVertices) {  // Check if u and v are valid indices
        1:   26:        std::cout << "Error: Invalid vertex index." << std::endl;  
        1:   27:        return;                                                
        -:   28:    }
        1:   29:    auto& neighborsU = adjList[u]; // Reference to u's adjacency list
        2:   30:    neighborsU.erase(                                              
        1:   31:        std::remove(neighborsU.begin(), neighborsU.end(), v), // Find v in u's list and move it to the end
        1:   32:        neighborsU.end() // Erase the found element(s)
        -:   33:    );
        1:   34:    if (!directed) {  // If the graph is undirected
        1:   35:        auto& neighborsV = adjList[v]; // Reference to v's adjacency list
        2:   36:        neighborsV.erase(                                          
        1:   37:            std::remove(neighborsV.begin(), neighborsV.end(), u),  // Find u in v's list and move it to the end
        2:   38:            neighborsV.end() // Erase the found element(s)
        -:   39:        );
        -:   40:    }
        -:   41:}
        -:   42:
        -:   43:// Function to print the adjacency list of the graph
        1:   44:void Graph::printGraph() const {
        6:   45:    for (int i = 0; i < numVertices; i++) {       
        5:   46:        std::cout << i << ": "; // Print the current vertex index
       19:   47:        for (int neighbor : adjList[i]) {         
       14:   48:            std::cout << neighbor << " "; // Print each neighbor
        -:   49:        }
        5:   50:        std::cout << std::endl; // Move to a new line after printing all neighbors
        -:   51:    }
        1:   52:}
        -:   53:
        -:   54:// Function to get the list of neighbors for vertex v
        1:   55:const std::vector<int>& Graph::getNeighbors(int v) const {
        1:   56:    return adjList[v];         
        -:   57:}
        -:   58:
        -:   59:// Function to get the total number of vertices in the graph
        1:   60:int Graph::getNumVertices() const {
        1:   61:    return numVertices;                        
        -:   62:}
